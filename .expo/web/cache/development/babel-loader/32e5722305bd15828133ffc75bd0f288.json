{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport ExpoHaptics from \"./ExpoHaptics\";\nimport { NotificationFeedbackType, ImpactFeedbackStyle } from \"./Haptics.types\";\nexport function notificationAsync() {\n  var type,\n      _args = arguments;\n  return _regeneratorRuntime.async(function notificationAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          type = _args.length > 0 && _args[0] !== undefined ? _args[0] : NotificationFeedbackType.Success;\n\n          if (ExpoHaptics.notificationAsync) {\n            _context.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('Haptics', 'notificationAsync');\n\n        case 3:\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(ExpoHaptics.notificationAsync(type));\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function impactAsync() {\n  var style,\n      _args2 = arguments;\n  return _regeneratorRuntime.async(function impactAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          style = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : ImpactFeedbackStyle.Medium;\n\n          if (ExpoHaptics.impactAsync) {\n            _context2.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('Haptic', 'impactAsync');\n\n        case 3:\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(ExpoHaptics.impactAsync(style));\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function selectionAsync() {\n  return _regeneratorRuntime.async(function selectionAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (ExpoHaptics.selectionAsync) {\n            _context3.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Haptic', 'selectionAsync');\n\n        case 2:\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(ExpoHaptics.selectionAsync());\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport { NotificationFeedbackType, ImpactFeedbackStyle };","map":{"version":3,"sources":["../src/Haptics.ts"],"names":[],"mappings":";AAAA,SAAS,mBAAT,QAAoC,mBAApC;AAEA,OAAO,WAAP;AACA,SAAS,wBAAT,EAAmC,mBAAnC;AAUA,OAAO,SAAe,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,UAAA,IADK,2DAC4B,wBAAwB,CAAC,OADrD;;AAAA,cAGA,WAAW,CAAC,iBAHZ;AAAA;AAAA;AAAA;;AAAA,gBAIG,IAAI,mBAAJ,CAAwB,SAAxB,EAAmC,mBAAnC,CAJH;;AAAA;AAAA;AAAA,2CAMC,WAAW,CAAC,iBAAZ,CAA8B,IAA9B,CAND;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBP,OAAO,SAAe,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,UAAA,KADK,8DACwB,mBAAmB,CAAC,MAD5C;;AAAA,cAGA,WAAW,CAAC,WAHZ;AAAA;AAAA;AAAA;;AAAA,gBAIG,IAAI,mBAAJ,CAAwB,QAAxB,EAAkC,aAAlC,CAJH;;AAAA;AAAA;AAAA,2CAMC,WAAW,CAAC,WAAZ,CAAwB,KAAxB,CAND;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcP,OAAO,SAAe,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cACA,WAAW,CAAC,cADZ;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAI,mBAAJ,CAAwB,QAAxB,EAAkC,gBAAlC,CAFH;;AAAA;AAAA;AAAA,2CAIC,WAAW,CAAC,cAAZ,EAJD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOP,SAAS,wBAAT,EAAmC,mBAAnC","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoHaptics from './ExpoHaptics';\nimport { NotificationFeedbackType, ImpactFeedbackStyle } from './Haptics.types';\n\n// @needsAudit\n/**\n * The kind of notification response used in the feedback.\n * @param type A notification feedback type that on iOS is directly mapped to [UINotificationFeedbackType](https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype),\n * while on Android these are simulated using [Vibrator](https://developer.android.com/reference/android/os/Vibrator).\n * You can use one of `Haptics.NotificationFeedbackType.{Success, Warning, Error}`.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function notificationAsync(\n  type: NotificationFeedbackType = NotificationFeedbackType.Success\n): Promise<void> {\n  if (!ExpoHaptics.notificationAsync) {\n    throw new UnavailabilityError('Haptics', 'notificationAsync');\n  }\n  await ExpoHaptics.notificationAsync(type);\n}\n\n// @needsAudit\n/**\n * @param style A collision indicator that on iOS is directly mapped to [`UIImpactFeedbackStyle`](https://developer.apple.com/documentation/uikit/uiimpactfeedbackstyle),\n * while on Android these are simulated using [Vibrator](https://developer.android.com/reference/android/os/Vibrator).\n * You can use one of `Haptics.ImpactFeedbackStyle.{Light, Medium, Heavy}`.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function impactAsync(\n  style: ImpactFeedbackStyle = ImpactFeedbackStyle.Medium\n): Promise<void> {\n  if (!ExpoHaptics.impactAsync) {\n    throw new UnavailabilityError('Haptic', 'impactAsync');\n  }\n  await ExpoHaptics.impactAsync(style);\n}\n\n// @needsAudit\n/**\n * Used to let a user know when a selection change has been registered.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function selectionAsync(): Promise<void> {\n  if (!ExpoHaptics.selectionAsync) {\n    throw new UnavailabilityError('Haptic', 'selectionAsync');\n  }\n  await ExpoHaptics.selectionAsync();\n}\n\nexport { NotificationFeedbackType, ImpactFeedbackStyle };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}