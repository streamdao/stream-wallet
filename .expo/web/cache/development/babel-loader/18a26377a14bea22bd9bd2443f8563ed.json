{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { PermissionStatus, createPermissionHook, EventEmitter, Platform } from 'expo-modules-core';\nimport { _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS } from \"../AV\";\nimport ExponentAV from \"../ExponentAV\";\nimport { isAudioEnabled, throwIfAudioIsDisabled } from \"./AudioAvailability\";\nimport { RECORDING_OPTIONS_PRESET_LOW_QUALITY } from \"./RecordingConstants\";\nimport { Sound } from \"./Sound\";\nvar _recorderExists = false;\nvar eventEmitter = Platform.OS === 'android' ? new EventEmitter(ExponentAV) : null;\nexport function getPermissionsAsync() {\n  return _regeneratorRuntime.async(function getPermissionsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", ExponentAV.getPermissionsAsync());\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function requestPermissionsAsync() {\n  return _regeneratorRuntime.async(function requestPermissionsAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", ExponentAV.requestPermissionsAsync());\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport var usePermissions = createPermissionHook({\n  getMethod: getPermissionsAsync,\n  requestMethod: requestPermissionsAsync\n});\nexport var Recording = function () {\n  function Recording() {\n    var _this = this;\n\n    _classCallCheck(this, Recording);\n\n    this._subscription = null;\n    this._canRecord = false;\n    this._isDoneRecording = false;\n    this._finalDurationMillis = 0;\n    this._uri = null;\n    this._onRecordingStatusUpdate = null;\n    this._progressUpdateTimeoutVariable = null;\n    this._progressUpdateIntervalMillis = _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;\n    this._options = null;\n\n    this._cleanupForUnloadedRecorder = function _callee(finalStatus) {\n      var _finalStatus$duration;\n\n      return _regeneratorRuntime.async(function _callee$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _this._canRecord = false;\n              _this._isDoneRecording = true;\n              _this._finalDurationMillis = (_finalStatus$duration = finalStatus == null ? void 0 : finalStatus.durationMillis) != null ? _finalStatus$duration : 0;\n              _recorderExists = false;\n\n              if (_this._subscription) {\n                _this._subscription.remove();\n\n                _this._subscription = null;\n              }\n\n              _this._disablePolling();\n\n              _context3.next = 8;\n              return _regeneratorRuntime.awrap(_this.getStatusAsync());\n\n            case 8:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    this._pollingLoop = function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(isAudioEnabled() && _this._canRecord && _this._onRecordingStatusUpdate != null)) {\n                _context4.next = 10;\n                break;\n              }\n\n              _this._progressUpdateTimeoutVariable = setTimeout(_this._pollingLoop, _this._progressUpdateIntervalMillis);\n              _context4.prev = 2;\n              _context4.next = 5;\n              return _regeneratorRuntime.awrap(_this.getStatusAsync());\n\n            case 5:\n              _context4.next = 10;\n              break;\n\n            case 7:\n              _context4.prev = 7;\n              _context4.t0 = _context4[\"catch\"](2);\n\n              _this._disablePolling();\n\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, [[2, 7]], Promise);\n    };\n\n    this.getStatusAsync = function _callee3() {\n      var status;\n      return _regeneratorRuntime.async(function _callee3$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!_this._canRecord) {\n                _context5.next = 2;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function () {\n                return ExponentAV.getAudioRecordingStatus();\n              }));\n\n            case 2:\n              status = {\n                canRecord: false,\n                isRecording: false,\n                isDoneRecording: _this._isDoneRecording,\n                durationMillis: _this._finalDurationMillis\n              };\n\n              _this._callOnRecordingStatusUpdateForNewStatus(status);\n\n              return _context5.abrupt(\"return\", status);\n\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  }\n\n  _createClass(Recording, [{\n    key: \"_disablePolling\",\n    value: function _disablePolling() {\n      if (this._progressUpdateTimeoutVariable != null) {\n        clearTimeout(this._progressUpdateTimeoutVariable);\n        this._progressUpdateTimeoutVariable = null;\n      }\n    }\n  }, {\n    key: \"_enablePollingIfNecessaryAndPossible\",\n    value: function _enablePollingIfNecessaryAndPossible() {\n      if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n        this._disablePolling();\n\n        this._pollingLoop();\n      }\n    }\n  }, {\n    key: \"_callOnRecordingStatusUpdateForNewStatus\",\n    value: function _callOnRecordingStatusUpdateForNewStatus(status) {\n      if (this._onRecordingStatusUpdate != null) {\n        this._onRecordingStatusUpdate(status);\n      }\n    }\n  }, {\n    key: \"_performOperationAndHandleStatusAsync\",\n    value: function _performOperationAndHandleStatusAsync(operation) {\n      var status;\n      return _regeneratorRuntime.async(function _performOperationAndHandleStatusAsync$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              throwIfAudioIsDisabled();\n\n              if (!this._canRecord) {\n                _context6.next = 9;\n                break;\n              }\n\n              _context6.next = 4;\n              return _regeneratorRuntime.awrap(operation());\n\n            case 4:\n              status = _context6.sent;\n\n              this._callOnRecordingStatusUpdateForNewStatus(status);\n\n              return _context6.abrupt(\"return\", status);\n\n            case 9:\n              throw new Error('Cannot complete operation because this recorder is not ready to record.');\n\n            case 10:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"setOnRecordingStatusUpdate\",\n    value: function setOnRecordingStatusUpdate(onRecordingStatusUpdate) {\n      this._onRecordingStatusUpdate = onRecordingStatusUpdate;\n\n      if (onRecordingStatusUpdate == null) {\n        this._disablePolling();\n      } else {\n        this._enablePollingIfNecessaryAndPossible();\n      }\n\n      this.getStatusAsync();\n    }\n  }, {\n    key: \"setProgressUpdateInterval\",\n    value: function setProgressUpdateInterval(progressUpdateIntervalMillis) {\n      this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n      this.getStatusAsync();\n    }\n  }, {\n    key: \"prepareToRecordAsync\",\n    value: function prepareToRecordAsync() {\n      var options,\n          extensionRegex,\n          _await$ExponentAV$pre,\n          uri,\n          status,\n          currentStatus,\n          _args7 = arguments;\n\n      return _regeneratorRuntime.async(function prepareToRecordAsync$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              options = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : RECORDING_OPTIONS_PRESET_LOW_QUALITY;\n              throwIfAudioIsDisabled();\n\n              if (!_recorderExists) {\n                _context7.next = 4;\n                break;\n              }\n\n              throw new Error('Only one Recording object can be prepared at a given time.');\n\n            case 4:\n              if (!this._isDoneRecording) {\n                _context7.next = 6;\n                break;\n              }\n\n              throw new Error('This Recording object is done recording; you must make a new one.');\n\n            case 6:\n              if (!(!options || !options.android || !options.ios)) {\n                _context7.next = 8;\n                break;\n              }\n\n              throw new Error('You must provide recording options for android and ios in order to prepare to record.');\n\n            case 8:\n              extensionRegex = /^\\.\\w+$/;\n\n              if (!(!options.android.extension || !options.ios.extension || !extensionRegex.test(options.android.extension) || !extensionRegex.test(options.ios.extension))) {\n                _context7.next = 11;\n                break;\n              }\n\n              throw new Error(\"Your file extensions must match \" + extensionRegex.toString() + \".\");\n\n            case 11:\n              if (this._canRecord) {\n                _context7.next = 28;\n                break;\n              }\n\n              if (eventEmitter) {\n                this._subscription = eventEmitter.addListener('Expo.Recording.recorderUnloaded', this._cleanupForUnloadedRecorder);\n              }\n\n              _context7.next = 15;\n              return _regeneratorRuntime.awrap(ExponentAV.prepareAudioRecorder(options));\n\n            case 15:\n              _await$ExponentAV$pre = _context7.sent;\n              uri = _await$ExponentAV$pre.uri;\n              status = _await$ExponentAV$pre.status;\n              _recorderExists = true;\n              this._uri = uri;\n              this._options = options;\n              this._canRecord = true;\n              currentStatus = _objectSpread(_objectSpread({}, status), {}, {\n                canRecord: true\n              });\n\n              this._callOnRecordingStatusUpdateForNewStatus(currentStatus);\n\n              this._enablePollingIfNecessaryAndPossible();\n\n              return _context7.abrupt(\"return\", currentStatus);\n\n            case 28:\n              throw new Error('This Recording object is already prepared to record.');\n\n            case 29:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"startAsync\",\n    value: function startAsync() {\n      return _regeneratorRuntime.async(function startAsync$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              return _context8.abrupt(\"return\", this._performOperationAndHandleStatusAsync(function () {\n                return ExponentAV.startAudioRecording();\n              }));\n\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"pauseAsync\",\n    value: function pauseAsync() {\n      return _regeneratorRuntime.async(function pauseAsync$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              return _context9.abrupt(\"return\", this._performOperationAndHandleStatusAsync(function () {\n                return ExponentAV.pauseAudioRecording();\n              }));\n\n            case 1:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"stopAndUnloadAsync\",\n    value: function stopAndUnloadAsync() {\n      var _stopResult;\n\n      var stopResult, stopError, status;\n      return _regeneratorRuntime.async(function stopAndUnloadAsync$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              if (this._canRecord) {\n                _context10.next = 6;\n                break;\n              }\n\n              if (!this._isDoneRecording) {\n                _context10.next = 5;\n                break;\n              }\n\n              throw new Error('Cannot unload a Recording that has already been unloaded.');\n\n            case 5:\n              throw new Error('Cannot unload a Recording that has not been prepared.');\n\n            case 6:\n              _context10.prev = 6;\n              _context10.next = 9;\n              return _regeneratorRuntime.awrap(ExponentAV.stopAudioRecording());\n\n            case 9:\n              stopResult = _context10.sent;\n              _context10.next = 15;\n              break;\n\n            case 12:\n              _context10.prev = 12;\n              _context10.t0 = _context10[\"catch\"](6);\n              stopError = _context10.t0;\n\n            case 15:\n              if (Platform.OS === 'web' && ((_stopResult = stopResult) == null ? void 0 : _stopResult.uri) !== undefined) {\n                this._uri = stopResult.uri;\n              }\n\n              _context10.next = 18;\n              return _regeneratorRuntime.awrap(ExponentAV.unloadAudioRecorder());\n\n            case 18:\n              _context10.next = 20;\n              return _regeneratorRuntime.awrap(this._cleanupForUnloadedRecorder(stopResult));\n\n            case 20:\n              status = _context10.sent;\n              return _context10.abrupt(\"return\", stopError ? Promise.reject(stopError) : status);\n\n            case 22:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, this, [[6, 12]], Promise);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI() {\n      return this._uri;\n    }\n  }, {\n    key: \"createNewLoadedSound\",\n    value: function createNewLoadedSound() {\n      var initialStatus,\n          onPlaybackStatusUpdate,\n          _args11 = arguments;\n      return _regeneratorRuntime.async(function createNewLoadedSound$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              initialStatus = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : {};\n              onPlaybackStatusUpdate = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : null;\n              console.warn(\"createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name\");\n              return _context11.abrupt(\"return\", this.createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate));\n\n            case 4:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"createNewLoadedSoundAsync\",\n    value: function createNewLoadedSoundAsync() {\n      var initialStatus,\n          onPlaybackStatusUpdate,\n          _args12 = arguments;\n      return _regeneratorRuntime.async(function createNewLoadedSoundAsync$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              initialStatus = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : {};\n              onPlaybackStatusUpdate = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : null;\n\n              if (!(this._uri == null || !this._isDoneRecording)) {\n                _context12.next = 4;\n                break;\n              }\n\n              throw new Error('Cannot create sound when the Recording has not finished!');\n\n            case 4:\n              return _context12.abrupt(\"return\", Sound.createAsync({\n                uri: this._uri\n              }, initialStatus, onPlaybackStatusUpdate, false));\n\n            case 5:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return Recording;\n}();\n\nRecording.createAsync = function _callee4() {\n  var options,\n      onRecordingStatusUpdate,\n      progressUpdateIntervalMillis,\n      recording,\n      status,\n      _args13 = arguments;\n  return _regeneratorRuntime.async(function _callee4$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          options = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : RECORDING_OPTIONS_PRESET_LOW_QUALITY;\n          onRecordingStatusUpdate = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : null;\n          progressUpdateIntervalMillis = _args13.length > 2 && _args13[2] !== undefined ? _args13[2] : null;\n          recording = new Recording();\n\n          if (progressUpdateIntervalMillis) {\n            recording._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n          }\n\n          recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);\n          _context13.next = 8;\n          return _regeneratorRuntime.awrap(recording.prepareToRecordAsync(_objectSpread(_objectSpread({}, options), {}, {\n            keepAudioActiveHint: true\n          })));\n\n        case 8:\n          _context13.prev = 8;\n          _context13.next = 11;\n          return _regeneratorRuntime.awrap(recording.startAsync());\n\n        case 11:\n          status = _context13.sent;\n          return _context13.abrupt(\"return\", {\n            recording: recording,\n            status: status\n          });\n\n        case 15:\n          _context13.prev = 15;\n          _context13.t0 = _context13[\"catch\"](8);\n          recording.stopAndUnloadAsync();\n          throw _context13.t0;\n\n        case 19:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, null, null, [[8, 15]], Promise);\n};\n\nexport * from \"./RecordingConstants\";\nexport { PermissionStatus };","map":{"version":3,"sources":["../../src/Audio/Recording.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionHookOptions,\n  createPermissionHook,\n  EventEmitter,\n  Subscription,\n  Platform,\n} from 'expo-modules-core';\n\nimport {\n  _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n} from '../AV';\nimport ExponentAV from '../ExponentAV';\nimport { isAudioEnabled, throwIfAudioIsDisabled } from './AudioAvailability';\nimport { RecordingOptions, RecordingStatus } from './Recording.types';\nimport { RECORDING_OPTIONS_PRESET_LOW_QUALITY } from './RecordingConstants';\nimport { Sound } from './Sound';\n\nlet _recorderExists: boolean = false;\nconst eventEmitter = Platform.OS === 'android' ? new EventEmitter(ExponentAV) : null;\n\nexport async function getPermissionsAsync(): Promise<PermissionResponse> {\n  return ExponentAV.getPermissionsAsync();\n}\n\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  return ExponentAV.requestPermissionsAsync();\n}\n\n/**\n * Check or request permissions to record audio.\n * This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Audio.usePermissions();\n * ```\n */\nexport const usePermissions = createPermissionHook({\n  getMethod: getPermissionsAsync,\n  requestMethod: requestPermissionsAsync,\n});\n\nexport class Recording {\n  _subscription: Subscription | null = null;\n  _canRecord: boolean = false;\n  _isDoneRecording: boolean = false;\n  _finalDurationMillis: number = 0;\n  _uri: string | null = null;\n  _onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null = null;\n  _progressUpdateTimeoutVariable: number | null = null;\n  _progressUpdateIntervalMillis: number = _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;\n  _options: RecordingOptions | null = null;\n\n  // Internal methods\n\n  _cleanupForUnloadedRecorder = async (finalStatus?: RecordingStatus) => {\n    this._canRecord = false;\n    this._isDoneRecording = true;\n    this._finalDurationMillis = finalStatus?.durationMillis ?? 0;\n    _recorderExists = false;\n    if (this._subscription) {\n      this._subscription.remove();\n      this._subscription = null;\n    }\n    this._disablePolling();\n    return await this.getStatusAsync(); // Automatically calls onRecordingStatusUpdate for the final state.\n  };\n\n  _pollingLoop = async () => {\n    if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n      this._progressUpdateTimeoutVariable = setTimeout(\n        this._pollingLoop,\n        this._progressUpdateIntervalMillis\n      ) as any;\n      try {\n        await this.getStatusAsync();\n      } catch (error) {\n        this._disablePolling();\n      }\n    }\n  };\n\n  _disablePolling() {\n    if (this._progressUpdateTimeoutVariable != null) {\n      clearTimeout(this._progressUpdateTimeoutVariable);\n      this._progressUpdateTimeoutVariable = null;\n    }\n  }\n\n  _enablePollingIfNecessaryAndPossible() {\n    if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n      this._disablePolling();\n      this._pollingLoop();\n    }\n  }\n\n  _callOnRecordingStatusUpdateForNewStatus(status: RecordingStatus) {\n    if (this._onRecordingStatusUpdate != null) {\n      this._onRecordingStatusUpdate(status);\n    }\n  }\n\n  async _performOperationAndHandleStatusAsync(\n    operation: () => Promise<RecordingStatus>\n  ): Promise<RecordingStatus> {\n    throwIfAudioIsDisabled();\n    if (this._canRecord) {\n      const status = await operation();\n      this._callOnRecordingStatusUpdateForNewStatus(status);\n      return status;\n    } else {\n      throw new Error('Cannot complete operation because this recorder is not ready to record.');\n    }\n  }\n\n  // Note that all calls automatically call onRecordingStatusUpdate as a side effect.\n\n  static createAsync = async (\n    options: RecordingOptions = RECORDING_OPTIONS_PRESET_LOW_QUALITY,\n    onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null = null,\n    progressUpdateIntervalMillis: number | null = null\n  ): Promise<{ recording: Recording; status: RecordingStatus }> => {\n    const recording: Recording = new Recording();\n    if (progressUpdateIntervalMillis) {\n      recording._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n    }\n    recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);\n    await recording.prepareToRecordAsync({\n      ...options,\n      keepAudioActiveHint: true,\n    });\n    try {\n      const status = await recording.startAsync();\n      return { recording, status };\n    } catch (err) {\n      recording.stopAndUnloadAsync();\n      throw err;\n    }\n  };\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<RecordingStatus> => {\n    // Automatically calls onRecordingStatusUpdate.\n    if (this._canRecord) {\n      return this._performOperationAndHandleStatusAsync(() => ExponentAV.getAudioRecordingStatus());\n    }\n    const status = {\n      canRecord: false,\n      isRecording: false,\n      isDoneRecording: this._isDoneRecording,\n      durationMillis: this._finalDurationMillis,\n    };\n    this._callOnRecordingStatusUpdateForNewStatus(status);\n    return status;\n  };\n\n  setOnRecordingStatusUpdate(onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null) {\n    this._onRecordingStatusUpdate = onRecordingStatusUpdate;\n    if (onRecordingStatusUpdate == null) {\n      this._disablePolling();\n    } else {\n      this._enablePollingIfNecessaryAndPossible();\n    }\n    this.getStatusAsync();\n  }\n\n  setProgressUpdateInterval(progressUpdateIntervalMillis: number) {\n    this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n    this.getStatusAsync();\n  }\n\n  // Record API\n\n  async prepareToRecordAsync(\n    options: RecordingOptions = RECORDING_OPTIONS_PRESET_LOW_QUALITY\n  ): Promise<RecordingStatus> {\n    throwIfAudioIsDisabled();\n\n    if (_recorderExists) {\n      throw new Error('Only one Recording object can be prepared at a given time.');\n    }\n\n    if (this._isDoneRecording) {\n      throw new Error('This Recording object is done recording; you must make a new one.');\n    }\n\n    if (!options || !options.android || !options.ios) {\n      throw new Error(\n        'You must provide recording options for android and ios in order to prepare to record.'\n      );\n    }\n\n    const extensionRegex = /^\\.\\w+$/;\n    if (\n      !options.android.extension ||\n      !options.ios.extension ||\n      !extensionRegex.test(options.android.extension) ||\n      !extensionRegex.test(options.ios.extension)\n    ) {\n      throw new Error(`Your file extensions must match ${extensionRegex.toString()}.`);\n    }\n\n    if (!this._canRecord) {\n      if (eventEmitter) {\n        this._subscription = eventEmitter.addListener(\n          'Expo.Recording.recorderUnloaded',\n          this._cleanupForUnloadedRecorder\n        );\n      }\n\n      const {\n        uri,\n        status,\n      }: {\n        uri: string | null;\n        // status is of type RecordingStatus, but without the canRecord field populated\n        status: Pick<RecordingStatus, Exclude<keyof RecordingStatus, 'canRecord'>>;\n      } = await ExponentAV.prepareAudioRecorder(options);\n      _recorderExists = true;\n      this._uri = uri;\n      this._options = options;\n      this._canRecord = true;\n\n      const currentStatus = { ...status, canRecord: true };\n      this._callOnRecordingStatusUpdateForNewStatus(currentStatus);\n      this._enablePollingIfNecessaryAndPossible();\n      return currentStatus;\n    } else {\n      throw new Error('This Recording object is already prepared to record.');\n    }\n  }\n\n  async startAsync(): Promise<RecordingStatus> {\n    return this._performOperationAndHandleStatusAsync(() => ExponentAV.startAudioRecording());\n  }\n\n  async pauseAsync(): Promise<RecordingStatus> {\n    return this._performOperationAndHandleStatusAsync(() => ExponentAV.pauseAudioRecording());\n  }\n\n  async stopAndUnloadAsync(): Promise<RecordingStatus> {\n    if (!this._canRecord) {\n      if (this._isDoneRecording) {\n        throw new Error('Cannot unload a Recording that has already been unloaded.');\n      } else {\n        throw new Error('Cannot unload a Recording that has not been prepared.');\n      }\n    }\n    // We perform a separate native API call so that the state of the Recording can be updated with\n    // the final duration of the recording. (We cast stopStatus as Object to appease Flow)\n    let stopResult: RecordingStatus | undefined;\n    let stopError: Error | undefined;\n    try {\n      stopResult = await ExponentAV.stopAudioRecording();\n    } catch (err) {\n      stopError = err;\n    }\n\n    // Web has to return the URI at the end of recording, so needs a little destructuring\n    if (Platform.OS === 'web' && stopResult?.uri !== undefined) {\n      this._uri = stopResult.uri;\n    }\n\n    // Clean-up and return status\n    await ExponentAV.unloadAudioRecorder();\n    const status = await this._cleanupForUnloadedRecorder(stopResult);\n    return stopError ? Promise.reject(stopError) : status;\n  }\n\n  // Read API\n\n  getURI(): string | null {\n    return this._uri;\n  }\n\n  /** @deprecated Use `createNewLoadedSoundAsync()` instead */\n  async createNewLoadedSound(\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null\n  ): Promise<{ sound: Sound; status: AVPlaybackStatus }> {\n    console.warn(\n      `createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name`\n    );\n    return this.createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate);\n  }\n\n  async createNewLoadedSoundAsync(\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null\n  ): Promise<{ sound: Sound; status: AVPlaybackStatus }> {\n    if (this._uri == null || !this._isDoneRecording) {\n      throw new Error('Cannot create sound when the Recording has not finished!');\n    }\n    return Sound.createAsync(\n      // $FlowFixMe: Flow can't distinguish between this literal and Asset\n      { uri: this._uri },\n      initialStatus,\n      onPlaybackStatusUpdate,\n      false\n    );\n  }\n}\n\nexport * from './RecordingConstants';\n\nexport {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionHookOptions,\n  RecordingOptions,\n  RecordingStatus,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}