{"ast":null,"code":"import ReactNativeViewViewConfig from \"../Components/View/ReactNativeViewViewConfig\";\nvar IGNORED_KEYS = ['transform', 'hitSlop'];\nexport default function verifyComponentAttributeEquivalence(nativeViewConfig, staticViewConfig) {\n  for (var _i = 0, _arr = ['validAttributes', 'bubblingEventTypes', 'directEventTypes']; _i < _arr.length; _i++) {\n    var prop = _arr[_i];\n    var diff = Object.keys(lefthandObjectDiff(nativeViewConfig[prop], staticViewConfig[prop]));\n\n    if (diff.length > 0) {\n      var _staticViewConfig$uiV;\n\n      var name = (_staticViewConfig$uiV = staticViewConfig.uiViewClassName) != null ? _staticViewConfig$uiV : nativeViewConfig.uiViewClassName;\n      console.error(\"'\" + name + \"' has a view config that does not match native. \" + (\"'\" + prop + \"' is missing: \" + diff.join(', ')));\n    }\n  }\n}\nexport function lefthandObjectDiff(leftObj, rightObj) {\n  var differentKeys = {};\n\n  function compare(leftItem, rightItem, key) {\n    if (typeof leftItem !== typeof rightItem && leftItem != null) {\n      differentKeys[key] = rightItem;\n      return;\n    }\n\n    if (typeof leftItem === 'object') {\n      var objDiff = lefthandObjectDiff(leftItem, rightItem);\n\n      if (Object.keys(objDiff).length > 1) {\n        differentKeys[key] = objDiff;\n      }\n\n      return;\n    }\n\n    if (leftItem !== rightItem) {\n      differentKeys[key] = rightItem;\n      return;\n    }\n  }\n\n  for (var key in leftObj) {\n    if (IGNORED_KEYS.includes(key)) {\n      continue;\n    }\n\n    if (!rightObj) {\n      differentKeys[key] = {};\n    } else if (leftObj.hasOwnProperty(key)) {\n      compare(leftObj[key], rightObj[key], key);\n    }\n  }\n\n  return differentKeys;\n}\nexport function getConfigWithoutViewProps(viewConfig, propName) {\n  if (!viewConfig[propName]) {\n    return {};\n  }\n\n  return Object.keys(viewConfig[propName]).filter(function (prop) {\n    return !ReactNativeViewViewConfig[propName][prop];\n  }).reduce(function (obj, prop) {\n    obj[prop] = viewConfig[propName][prop];\n    return obj;\n  }, {});\n}\nexport function stringifyViewConfig(viewConfig) {\n  return JSON.stringify(viewConfig, function (key, val) {\n    if (typeof val === 'function') {\n      return \"\\u0192 \" + val.name;\n    }\n\n    return val;\n  }, 2);\n}","map":{"version":3,"sources":["/workspace/stream-pay/node_modules/react-native/Libraries/Utilities/verifyComponentAttributeEquivalence.js"],"names":["ReactNativeViewViewConfig","IGNORED_KEYS","verifyComponentAttributeEquivalence","nativeViewConfig","staticViewConfig","prop","diff","Object","keys","lefthandObjectDiff","length","name","uiViewClassName","console","error","join","leftObj","rightObj","differentKeys","compare","leftItem","rightItem","key","objDiff","includes","hasOwnProperty","getConfigWithoutViewProps","viewConfig","propName","filter","reduce","obj","stringifyViewConfig","JSON","stringify","val"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport ReactNativeViewViewConfig from '../Components/View/ReactNativeViewViewConfig';\nimport {type ViewConfig} from '../Renderer/shims/ReactNativeTypes';\n\nconst IGNORED_KEYS = ['transform', 'hitSlop'];\n\n/**\n * The purpose of this function is to validate that the view config that\n * native exposes for a given view manager is the same as the view config\n * that is specified for that view manager in JS.\n *\n * In order to improve perf, we want to avoid calling into native to get\n * the view config when each view manager is used. To do this, we are moving\n * the configs to JS. In the future we will use these JS based view configs\n * to codegen the view manager on native to ensure they stay in sync without\n * this runtime check.\n *\n * If this function fails, that likely means a change was made to the native\n * view manager without updating the JS config as well. Ideally you can make\n * that direct change to the JS config. If you don't know what the differences\n * are, the best approach I've found is to create a view that prints\n * the return value of getNativeComponentAttributes, and then copying that\n * text and pasting it back into JS:\n * <Text selectable={true}>{JSON.stringify(getNativeComponentAttributes('RCTView'))}</Text>\n *\n * This is meant to be a stopgap until the time comes when we only have a\n * single source of truth. I wonder if this message will still be here two\n * years from now...\n */\nexport default function verifyComponentAttributeEquivalence(\n  nativeViewConfig: ViewConfig,\n  staticViewConfig: ViewConfig,\n) {\n  for (const prop of [\n    'validAttributes',\n    'bubblingEventTypes',\n    'directEventTypes',\n  ]) {\n    const diff = Object.keys(\n      lefthandObjectDiff(nativeViewConfig[prop], staticViewConfig[prop]),\n    );\n\n    if (diff.length > 0) {\n      const name =\n        staticViewConfig.uiViewClassName ?? nativeViewConfig.uiViewClassName;\n      console.error(\n        `'${name}' has a view config that does not match native. ` +\n          `'${prop}' is missing: ${diff.join(', ')}`,\n      );\n    }\n  }\n}\n\nexport function lefthandObjectDiff(leftObj: Object, rightObj: Object): Object {\n  const differentKeys = {};\n\n  function compare(leftItem, rightItem, key) {\n    if (typeof leftItem !== typeof rightItem && leftItem != null) {\n      differentKeys[key] = rightItem;\n      return;\n    }\n\n    if (typeof leftItem === 'object') {\n      const objDiff = lefthandObjectDiff(leftItem, rightItem);\n      if (Object.keys(objDiff).length > 1) {\n        differentKeys[key] = objDiff;\n      }\n      return;\n    }\n\n    if (leftItem !== rightItem) {\n      differentKeys[key] = rightItem;\n      return;\n    }\n  }\n\n  for (const key in leftObj) {\n    if (IGNORED_KEYS.includes(key)) {\n      continue;\n    }\n\n    if (!rightObj) {\n      differentKeys[key] = {};\n    } else if (leftObj.hasOwnProperty(key)) {\n      compare(leftObj[key], rightObj[key], key);\n    }\n  }\n\n  return differentKeys;\n}\n\nexport function getConfigWithoutViewProps(\n  viewConfig: ViewConfig,\n  propName: string,\n): {...} {\n  if (!viewConfig[propName]) {\n    return {};\n  }\n\n  return Object.keys(viewConfig[propName])\n    .filter(prop => !ReactNativeViewViewConfig[propName][prop])\n    .reduce((obj, prop) => {\n      obj[prop] = viewConfig[propName][prop];\n      return obj;\n    }, {});\n}\n\nexport function stringifyViewConfig(viewConfig: any): string {\n  return JSON.stringify(\n    viewConfig,\n    (key, val) => {\n      if (typeof val === 'function') {\n        return `Æ’ ${val.name}`;\n      }\n      return val;\n    },\n    2,\n  );\n}\n"]},"metadata":{},"sourceType":"module"}