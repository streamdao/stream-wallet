{"ast":null,"code":"'use strict';\n\nif (__DEV__) {\n  var isWebSocketOpen = false;\n  var ws = null;\n\n  var reactDevTools = require('react-devtools-core');\n\n  var connectToDevTools = function connectToDevTools() {\n    if (ws !== null && isWebSocketOpen) {\n      return;\n    }\n\n    if (!window.document) {\n      var AppState = require(\"../AppState/AppState\");\n\n      var getDevServer = require(\"./Devtools/getDevServer\");\n\n      var isAppActive = function isAppActive() {\n        return AppState.currentState !== 'background';\n      };\n\n      var devServer = getDevServer();\n      var host = devServer.bundleLoadedFromServer ? devServer.url.replace(/https?:\\/\\//, '').split(':')[0] : 'localhost';\n      var port = window.__REACT_DEVTOOLS_PORT__ != null ? window.__REACT_DEVTOOLS_PORT__ : 8097;\n\n      var WebSocket = require(\"../WebSocket/WebSocket\");\n\n      ws = new WebSocket('ws://' + host + ':' + port);\n      ws.addEventListener('close', function (event) {\n        isWebSocketOpen = false;\n      });\n      ws.addEventListener('open', function (event) {\n        isWebSocketOpen = true;\n      });\n\n      var viewConfig = require(\"../Components/View/ReactNativeViewViewConfig\");\n\n      reactDevTools.connectToDevTools({\n        isAppActive: isAppActive,\n        resolveRNStyle: require(\"../StyleSheet/flattenStyle\"),\n        nativeStyleEditorValidAttributes: Object.keys(viewConfig.validAttributes.style),\n        websocket: ws\n      });\n    }\n  };\n\n  var RCTNativeAppEventEmitter = require(\"../EventEmitter/RCTNativeAppEventEmitter\");\n\n  RCTNativeAppEventEmitter.addListener('RCTDevMenuShown', connectToDevTools);\n  connectToDevTools();\n}","map":{"version":3,"sources":["/workspace/stream-pay/node_modules/react-native/Libraries/Core/setUpReactDevTools.js"],"names":["__DEV__","isWebSocketOpen","ws","reactDevTools","require","connectToDevTools","window","document","AppState","getDevServer","isAppActive","currentState","devServer","host","bundleLoadedFromServer","url","replace","split","port","__REACT_DEVTOOLS_PORT__","WebSocket","addEventListener","event","viewConfig","resolveRNStyle","nativeStyleEditorValidAttributes","Object","keys","validAttributes","style","websocket","RCTNativeAppEventEmitter","addListener"],"mappings":"AAUA;;AAEA,IAAIA,OAAJ,EAAa;AACX,MAAIC,eAAe,GAAG,KAAtB;AACA,MAAIC,EAAE,GAAG,IAAT;;AAEA,MAAMC,aAAa,GAAGC,OAAO,CAAC,qBAAD,CAA7B;;AACA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9B,QAAIH,EAAE,KAAK,IAAP,IAAeD,eAAnB,EAAoC;AAKlC;AACD;;AAID,QAAI,CAACK,MAAM,CAACC,QAAZ,EAAsB;AACpB,UAAMC,QAAQ,GAAGJ,OAAO,wBAAxB;;AACA,UAAMK,YAAY,GAAGL,OAAO,2BAA5B;;AAMA,UAAMM,WAAW,GAAG,SAAdA,WAAc;AAAA,eAAMF,QAAQ,CAACG,YAAT,KAA0B,YAAhC;AAAA,OAApB;;AAGA,UAAMC,SAAS,GAAGH,YAAY,EAA9B;AACA,UAAMI,IAAI,GAAGD,SAAS,CAACE,sBAAV,GACTF,SAAS,CAACG,GAAV,CAAcC,OAAd,CAAsB,aAAtB,EAAqC,EAArC,EAAyCC,KAAzC,CAA+C,GAA/C,EAAoD,CAApD,CADS,GAET,WAFJ;AAMA,UAAMC,IAAI,GACRZ,MAAM,CAACa,uBAAP,IAAkC,IAAlC,GACIb,MAAM,CAACa,uBADX,GAEI,IAHN;;AAKA,UAAMC,SAAS,GAAGhB,OAAO,0BAAzB;;AACAF,MAAAA,EAAE,GAAG,IAAIkB,SAAJ,CAAc,UAAUP,IAAV,GAAiB,GAAjB,GAAuBK,IAArC,CAAL;AACAhB,MAAAA,EAAE,CAACmB,gBAAH,CAAoB,OAApB,EAA6B,UAAAC,KAAK,EAAI;AACpCrB,QAAAA,eAAe,GAAG,KAAlB;AACD,OAFD;AAGAC,MAAAA,EAAE,CAACmB,gBAAH,CAAoB,MAApB,EAA4B,UAAAC,KAAK,EAAI;AACnCrB,QAAAA,eAAe,GAAG,IAAlB;AACD,OAFD;;AAIA,UAAMsB,UAAU,GAAGnB,OAAO,gDAA1B;;AACAD,MAAAA,aAAa,CAACE,iBAAd,CAAgC;AAC9BK,QAAAA,WAAW,EAAXA,WAD8B;AAE9Bc,QAAAA,cAAc,EAAEpB,OAAO,8BAFO;AAG9BqB,QAAAA,gCAAgC,EAAEC,MAAM,CAACC,IAAP,CAChCJ,UAAU,CAACK,eAAX,CAA2BC,KADK,CAHJ;AAM9BC,QAAAA,SAAS,EAAE5B;AANmB,OAAhC;AAQD;AACF,GArDD;;AAuDA,MAAM6B,wBAAwB,GAAG3B,OAAO,4CAAxC;;AACA2B,EAAAA,wBAAwB,CAACC,WAAzB,CAAqC,iBAArC,EAAwD3B,iBAAxD;AACAA,EAAAA,iBAAiB;AAClB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nif (__DEV__) {\n  let isWebSocketOpen = false;\n  let ws = null;\n\n  const reactDevTools = require('react-devtools-core');\n  const connectToDevTools = () => {\n    if (ws !== null && isWebSocketOpen) {\n      // If the DevTools backend is already connected, don't recreate the WebSocket.\n      // This would break the connection.\n      // If there isn't an active connection, a backend may be waiting to connect,\n      // in which case it's okay to make a new one.\n      return;\n    }\n\n    // not when debugging in chrome\n    // TODO(t12832058) This check is broken\n    if (!window.document) {\n      const AppState = require('../AppState/AppState');\n      const getDevServer = require('./Devtools/getDevServer');\n\n      // Don't steal the DevTools from currently active app.\n      // Note: if you add any AppState subscriptions to this file,\n      // you will also need to guard against `AppState.isAvailable`,\n      // or the code will throw for bundles that don't have it.\n      const isAppActive = () => AppState.currentState !== 'background';\n\n      // Get hostname from development server (packager)\n      const devServer = getDevServer();\n      const host = devServer.bundleLoadedFromServer\n        ? devServer.url.replace(/https?:\\/\\//, '').split(':')[0]\n        : 'localhost';\n\n      // Read the optional global variable for backward compatibility.\n      // It was added in https://github.com/facebook/react-native/commit/bf2b435322e89d0aeee8792b1c6e04656c2719a0.\n      const port =\n        window.__REACT_DEVTOOLS_PORT__ != null\n          ? window.__REACT_DEVTOOLS_PORT__\n          : 8097;\n\n      const WebSocket = require('../WebSocket/WebSocket');\n      ws = new WebSocket('ws://' + host + ':' + port);\n      ws.addEventListener('close', event => {\n        isWebSocketOpen = false;\n      });\n      ws.addEventListener('open', event => {\n        isWebSocketOpen = true;\n      });\n\n      const viewConfig = require('../Components/View/ReactNativeViewViewConfig');\n      reactDevTools.connectToDevTools({\n        isAppActive,\n        resolveRNStyle: require('../StyleSheet/flattenStyle'),\n        nativeStyleEditorValidAttributes: Object.keys(\n          viewConfig.validAttributes.style,\n        ),\n        websocket: ws,\n      });\n    }\n  };\n\n  const RCTNativeAppEventEmitter = require('../EventEmitter/RCTNativeAppEventEmitter');\n  RCTNativeAppEventEmitter.addListener('RCTDevMenuShown', connectToDevTools);\n  connectToDevTools(); // Try connecting once on load\n}\n"]},"metadata":{},"sourceType":"script"}