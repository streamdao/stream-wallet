{"ast":null,"code":"import { Reanimated } from \"./reanimatedWrapper\";\nimport { State } from \"../../State\";\nexport var GestureStateManager = {\n  create: function () {\n    var _f = function _f(handlerTag) {\n      return {\n        begin: function () {\n          var _f = function _f() {\n            if (Reanimated) {\n              Reanimated.setGestureState(handlerTag, State.BEGAN);\n            } else {\n              console.warn('react-native-reanimated is required in order to use synchronous state management');\n            }\n          };\n\n          _f._closure = {\n            Reanimated: Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              BEGAN: State.BEGAN\n            }\n          };\n          _f.asString = \"function begin(){const{Reanimated,handlerTag,State}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.BEGAN);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}}\";\n          _f.__workletHash = 5592744355385;\n          _f.__location = \"/workspace/stream-pay/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureStateManager.js (8:13)\";\n\n          global.__reanimatedWorkletInit(_f);\n\n          return _f;\n        }(),\n        activate: function () {\n          var _f = function _f() {\n            if (Reanimated) {\n              Reanimated.setGestureState(handlerTag, State.ACTIVE);\n            } else {\n              console.warn('react-native-reanimated is required in order to use synchronous state management');\n            }\n          };\n\n          _f._closure = {\n            Reanimated: Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              ACTIVE: State.ACTIVE\n            }\n          };\n          _f.asString = \"function activate(){const{Reanimated,handlerTag,State}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.ACTIVE);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}}\";\n          _f.__workletHash = 14578985412132;\n          _f.__location = \"/workspace/stream-pay/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureStateManager.js (17:16)\";\n\n          global.__reanimatedWorkletInit(_f);\n\n          return _f;\n        }(),\n        fail: function () {\n          var _f = function _f() {\n            if (Reanimated) {\n              Reanimated.setGestureState(handlerTag, State.FAILED);\n            } else {\n              console.warn('react-native-reanimated is required in order to use synchronous state management');\n            }\n          };\n\n          _f._closure = {\n            Reanimated: Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              FAILED: State.FAILED\n            }\n          };\n          _f.asString = \"function fail(){const{Reanimated,handlerTag,State}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.FAILED);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}}\";\n          _f.__workletHash = 14327088908112;\n          _f.__location = \"/workspace/stream-pay/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureStateManager.js (26:12)\";\n\n          global.__reanimatedWorkletInit(_f);\n\n          return _f;\n        }(),\n        end: function () {\n          var _f = function _f() {\n            if (Reanimated) {\n              Reanimated.setGestureState(handlerTag, State.END);\n            } else {\n              console.warn('react-native-reanimated is required in order to use synchronous state management');\n            }\n          };\n\n          _f._closure = {\n            Reanimated: Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              END: State.END\n            }\n          };\n          _f.asString = \"function end(){const{Reanimated,handlerTag,State}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.END);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}}\";\n          _f.__workletHash = 16769257690097;\n          _f.__location = \"/workspace/stream-pay/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureStateManager.js (35:11)\";\n\n          global.__reanimatedWorkletInit(_f);\n\n          return _f;\n        }()\n      };\n    };\n\n    _f._closure = {\n      Reanimated: Reanimated,\n      State: {\n        BEGAN: State.BEGAN,\n        ACTIVE: State.ACTIVE,\n        FAILED: State.FAILED,\n        END: State.END\n      }\n    };\n    _f.asString = \"function create(handlerTag){const{Reanimated,State}=jsThis._closure;{return{begin:function(){var _f=function _f(){if(Reanimated){Reanimated.setGestureState(handlerTag,State.BEGAN);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}};_f._closure={Reanimated:Reanimated,handlerTag:handlerTag,State:{BEGAN:State.BEGAN}};_f.asString=\\\"function begin(){const{Reanimated,handlerTag,State}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.BEGAN);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}}\\\";_f.__workletHash=5592744355385;_f.__location=\\\"/workspace/stream-pay/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureStateManager.js (8:13)\\\";global.__reanimatedWorkletInit(_f);return _f;}(),activate:function(){var _f=function _f(){if(Reanimated){Reanimated.setGestureState(handlerTag,State.ACTIVE);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}};_f._closure={Reanimated:Reanimated,handlerTag:handlerTag,State:{ACTIVE:State.ACTIVE}};_f.asString=\\\"function activate(){const{Reanimated,handlerTag,State}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.ACTIVE);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}}\\\";_f.__workletHash=14578985412132;_f.__location=\\\"/workspace/stream-pay/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureStateManager.js (17:16)\\\";global.__reanimatedWorkletInit(_f);return _f;}(),fail:function(){var _f=function _f(){if(Reanimated){Reanimated.setGestureState(handlerTag,State.FAILED);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}};_f._closure={Reanimated:Reanimated,handlerTag:handlerTag,State:{FAILED:State.FAILED}};_f.asString=\\\"function fail(){const{Reanimated,handlerTag,State}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.FAILED);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}}\\\";_f.__workletHash=14327088908112;_f.__location=\\\"/workspace/stream-pay/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureStateManager.js (26:12)\\\";global.__reanimatedWorkletInit(_f);return _f;}(),end:function(){var _f=function _f(){if(Reanimated){Reanimated.setGestureState(handlerTag,State.END);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}};_f._closure={Reanimated:Reanimated,handlerTag:handlerTag,State:{END:State.END}};_f.asString=\\\"function end(){const{Reanimated,handlerTag,State}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.END);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}}\\\";_f.__workletHash=16769257690097;_f.__location=\\\"/workspace/stream-pay/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureStateManager.js (35:11)\\\";global.__reanimatedWorkletInit(_f);return _f;}()};}}\";\n    _f.__workletHash = 14843310354193;\n    _f.__location = \"/workspace/stream-pay/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureStateManager.js\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }()\n};","map":{"version":3,"sources":["gestureStateManager.ts"],"names":["GestureStateManager","create","begin","Reanimated","State","console","activate","fail","end"],"mappings":"AAAA,SAAA,UAAA;AACA,SAAA,KAAA;AASA,OAAO,IAAMA,mBAAmB,GAAG;AACjCC,EAAAA,MADiC;AAAA,yBAC3B,UAD2B,EACmB;AAElD,aAAO;AACLC,QAAAA,KAAK;AAAA,iCAAQ;AAEX,gBAAA,UAAA,EAAgB;AACdC,cAAAA,UAAU,CAAVA,eAAAA,CAAAA,UAAAA,EAAuCC,KAAK,CAA5CD,KAAAA;AADF,aAAA,MAEO;AACLE,cAAAA,OAAO,CAAPA,IAAAA,CAAAA,kFAAAA;AAGD;AATE,WACA;;AAAA;AAAA,wBAFP,UAEO;AAAA,wB,UAAA;AAAA;AAAA,qB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,WADA;AAYLC,QAAAA,QAAQ;AAAA,iCAAQ;AAEd,gBAAA,UAAA,EAAgB;AACdH,cAAAA,UAAU,CAAVA,eAAAA,CAAAA,UAAAA,EAAuCC,KAAK,CAA5CD,MAAAA;AADF,aAAA,MAEO;AACLE,cAAAA,OAAO,CAAPA,IAAAA,CAAAA,kFAAAA;AAGD;AApBE,WAYG;;AAAA;AAAA,wBAbV,UAaU;AAAA,wB,UAAA;AAAA;AAAA,sB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,WAZH;AAuBLE,QAAAA,IAAI;AAAA,iCAAQ;AAEV,gBAAA,UAAA,EAAgB;AACdJ,cAAAA,UAAU,CAAVA,eAAAA,CAAAA,UAAAA,EAAuCC,KAAK,CAA5CD,MAAAA;AADF,aAAA,MAEO;AACLE,cAAAA,OAAO,CAAPA,IAAAA,CAAAA,kFAAAA;AAGD;AA/BE,WAuBD;;AAAA;AAAA,wBAxBN,UAwBM;AAAA,wB,UAAA;AAAA;AAAA,sB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,WAvBC;AAkCLG,QAAAA,GAAG;AAAA,iCAAQ;AAET,gBAAA,UAAA,EAAgB;AACdL,cAAAA,UAAU,CAAVA,eAAAA,CAAAA,UAAAA,EAAuCC,KAAK,CAA5CD,GAAAA;AADF,aAAA,MAEO;AACLE,cAAAA,OAAO,CAAPA,IAAAA,CAAAA,kFAAAA;AAGD;AACF,WATE;;AAAA;AAAA,wBAnCL,UAmCK;AAAA,wB,UAAA;AAAA;AAAA,mB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAlCE,OAAP;AA6CD,KAhDgC;;AAAA;AAAA,kB,UAAA;AAAA;AAAA,e,WAAA;AAAA,gBA8C5B,KAAA,CAAA,MA9C4B;AAAA,gB,YAAA;AAAA,a;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,CAA5B","sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}