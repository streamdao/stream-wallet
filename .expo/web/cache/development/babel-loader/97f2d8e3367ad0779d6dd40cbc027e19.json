{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { memo, useEffect } from 'react';\nimport { Background, SubPageHeader } from \"../components\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Video } from 'expo-av';\nimport { useStoreState } from \"../hooks/storeHooks\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar NFTdisplayScreen = function NFTdisplayScreen(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n  var nftIndex = route.params;\n  var video = React.useRef(null);\n  var subWalletNftsArray = useStoreState(function (state) {\n    return state.subWalletNftsArray;\n  });\n\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      status = _React$useState2[0],\n      setStatus = _React$useState2[1];\n\n  function getNft() {\n    var result = subWalletNftsArray[nftIndex];\n    console.log('result: ', result);\n    return result;\n  }\n\n  function getCategory() {\n    var category = subWalletNftsArray[nftIndex].Properties.category;\n\n    if (category === 'video') {\n      return _jsx(Video, {\n        ref: video,\n        style: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0\n        },\n        source: {\n          uri: subWalletNftsArray[nftIndex].Properties.animation_url\n        },\n        useNativeControls: true,\n        resizeMode: \"contain\",\n        isLooping: true,\n        onPlaybackStatusUpdate: function onPlaybackStatusUpdate(status) {\n          return setStatus(function () {\n            return status;\n          });\n        }\n      });\n    } else if (category === 'image') {\n      return _jsx(Image, {\n        style: {\n          flex: 1,\n          height: undefined,\n          width: undefined,\n          resizeMode: 'contain'\n        },\n        source: {\n          uri: subWalletNftsArray[nftIndex].Preview_URL\n        }\n      });\n    }\n  }\n\n  useEffect(function () {\n    getNft();\n  }, []);\n  return _jsxs(Background, {\n    blackBackground: true,\n    fullView: true,\n    children: [_jsx(SubPageHeader, {\n      backButton: true,\n      whiteBackButton: true,\n      fullScreen: true\n    }), _jsx(View, {\n      style: {\n        flex: 1\n      },\n      children: getCategory()\n    })]\n  });\n};\n\nexport default memo(NFTdisplayScreen);","map":{"version":3,"names":["React","memo","useEffect","Background","SubPageHeader","Video","useStoreState","NFTdisplayScreen","navigation","route","nftIndex","params","video","useRef","subWalletNftsArray","state","useState","status","setStatus","getNft","result","console","log","getCategory","category","Properties","position","top","left","bottom","right","uri","animation_url","flex","height","undefined","width","resizeMode","Preview_URL"],"sources":["/workspace/stream-wallet/screens/NFTdisplayScreen.tsx"],"sourcesContent":["import React, {\n\tmemo,\n\tuseState,\n\tuseMemo,\n\tuseRef,\n\tuseCallback,\n\tuseEffect,\n} from 'react';\nimport { Text, TouchableOpacity, StyleSheet } from 'react-native';\nimport {\n\tBackground,\n\tThemeButton,\n\tSubPageHeader,\n\tRedButton,\n} from '../components';\nimport { Navigation } from '../types';\nimport { View, Image, ScrollView } from 'react-native';\n//import Video from 'react-native-video';\nimport { Video, AVPlaybackStatus } from 'expo-av';\nimport { theme } from '../core/theme';\nimport { useStoreState, useStoreActions } from '../hooks/storeHooks';\nimport { BottomSheetModal } from '@gorhom/bottom-sheet';\nimport { shortenPublicKey, copyToClipboard } from '../utils';\n\nimport { useContext } from 'react';\nimport AppContext from '../components/AppContext';\n\ntype Props = {\n\tnavigation: Navigation;\n\troute: Object;\n};\n\nconst NFTdisplayScreen = ({ navigation, route }: Props) => {\n\tconst nftIndex = route.params;\n\tconst video = React.useRef(null);\n\tconst subWalletNftsArray = useStoreState(\n\t\t(state) => state.subWalletNftsArray,\n\t);\n\tconst [status, setStatus] = React.useState({});\n\n\tfunction getNft() {\n\t\tconst result = subWalletNftsArray[nftIndex];\n\t\tconsole.log('result: ', result);\n\t\treturn result;\n\t}\n\n\tfunction getCategory() {\n\t\tconst category = subWalletNftsArray[nftIndex].Properties.category;\n\t\tif (category === 'video') {\n\t\t\treturn (\n\t\t\t\t<Video\n\t\t\t\t\tref={video}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\tbottom: 0,\n\t\t\t\t\t\tright: 0,\n\t\t\t\t\t}}\n\t\t\t\t\tsource={{\n\t\t\t\t\t\turi: subWalletNftsArray[nftIndex].Properties\n\t\t\t\t\t\t\t.animation_url,\n\t\t\t\t\t}}\n\t\t\t\t\tuseNativeControls\n\t\t\t\t\tresizeMode=\"contain\"\n\t\t\t\t\tisLooping\n\t\t\t\t\tonPlaybackStatusUpdate={(status) => setStatus(() => status)}\n\t\t\t\t/>\n\t\t\t);\n\t\t} else if (category === 'image') {\n\t\t\treturn (\n\t\t\t\t<Image\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tflex: 1,\n\t\t\t\t\t\theight: undefined,\n\t\t\t\t\t\twidth: undefined,\n\t\t\t\t\t\tresizeMode: 'contain',\n\t\t\t\t\t}}\n\t\t\t\t\tsource={{\n\t\t\t\t\t\turi: subWalletNftsArray[nftIndex].Preview_URL,\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t\t// console.log('category: ', category);\n\t}\n\n\tuseEffect(() => {\n\t\tgetNft();\n\t}, []);\n\n\treturn (\n\t\t<Background blackBackground={true} fullView={true}>\n\t\t\t<SubPageHeader\n\t\t\t\tbackButton={true}\n\t\t\t\twhiteBackButton={true}\n\t\t\t\tfullScreen={true}\n\t\t\t></SubPageHeader>\n\t\t\t<View style={{ flex: 1 }}>{getCategory()}</View>\n\t\t</Background>\n\t);\n};\n\nexport default memo(NFTdisplayScreen);\n"],"mappings":";AAAA,OAAOA,KAAP,IACCC,IADD,EAMCC,SAND,QAOO,OAPP;AASA,SACCC,UADD,EAGCC,aAHD;;;AASA,SAASC,KAAT,QAAwC,SAAxC;AAEA,SAASC,aAAT;;;;AAYA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAkC;EAAA,IAA/BC,UAA+B,QAA/BA,UAA+B;EAAA,IAAnBC,KAAmB,QAAnBA,KAAmB;EAC1D,IAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAvB;EACA,IAAMC,KAAK,GAAGZ,KAAK,CAACa,MAAN,CAAa,IAAb,CAAd;EACA,IAAMC,kBAAkB,GAAGR,aAAa,CACvC,UAACS,KAAD;IAAA,OAAWA,KAAK,CAACD,kBAAjB;EAAA,CADuC,CAAxC;;EAGA,sBAA4Bd,KAAK,CAACgB,QAAN,CAAe,EAAf,CAA5B;EAAA;EAAA,IAAOC,MAAP;EAAA,IAAeC,SAAf;;EAEA,SAASC,MAAT,GAAkB;IACjB,IAAMC,MAAM,GAAGN,kBAAkB,CAACJ,QAAD,CAAjC;IACAW,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,MAAxB;IACA,OAAOA,MAAP;EACA;;EAED,SAASG,WAAT,GAAuB;IACtB,IAAMC,QAAQ,GAAGV,kBAAkB,CAACJ,QAAD,CAAlB,CAA6Be,UAA7B,CAAwCD,QAAzD;;IACA,IAAIA,QAAQ,KAAK,OAAjB,EAA0B;MACzB,OACC,KAAC,KAAD;QACC,GAAG,EAAEZ,KADN;QAEC,KAAK,EAAE;UACNc,QAAQ,EAAE,UADJ;UAENC,GAAG,EAAE,CAFC;UAGNC,IAAI,EAAE,CAHA;UAINC,MAAM,EAAE,CAJF;UAKNC,KAAK,EAAE;QALD,CAFR;QASC,MAAM,EAAE;UACPC,GAAG,EAAEjB,kBAAkB,CAACJ,QAAD,CAAlB,CAA6Be,UAA7B,CACHO;QAFK,CATT;QAaC,iBAAiB,MAblB;QAcC,UAAU,EAAC,SAdZ;QAeC,SAAS,MAfV;QAgBC,sBAAsB,EAAE,gCAACf,MAAD;UAAA,OAAYC,SAAS,CAAC;YAAA,OAAMD,MAAN;UAAA,CAAD,CAArB;QAAA;MAhBzB,EADD;IAoBA,CArBD,MAqBO,IAAIO,QAAQ,KAAK,OAAjB,EAA0B;MAChC,OACC,KAAC,KAAD;QACC,KAAK,EAAE;UACNS,IAAI,EAAE,CADA;UAENC,MAAM,EAAEC,SAFF;UAGNC,KAAK,EAAED,SAHD;UAINE,UAAU,EAAE;QAJN,CADR;QAOC,MAAM,EAAE;UACPN,GAAG,EAAEjB,kBAAkB,CAACJ,QAAD,CAAlB,CAA6B4B;QAD3B;MAPT,EADD;IAaA;EAED;;EAEDpC,SAAS,CAAC,YAAM;IACfiB,MAAM;EACN,CAFQ,EAEN,EAFM,CAAT;EAIA,OACC,MAAC,UAAD;IAAY,eAAe,EAAE,IAA7B;IAAmC,QAAQ,EAAE,IAA7C;IAAA,WACC,KAAC,aAAD;MACC,UAAU,EAAE,IADb;MAEC,eAAe,EAAE,IAFlB;MAGC,UAAU,EAAE;IAHb,EADD,EAMC,KAAC,IAAD;MAAM,KAAK,EAAE;QAAEc,IAAI,EAAE;MAAR,CAAb;MAAA,UAA2BV,WAAW;IAAtC,EAND;EAAA,EADD;AAUA,CArED;;AAuEA,eAAetB,IAAI,CAACM,gBAAD,CAAnB"},"metadata":{},"sourceType":"module"}