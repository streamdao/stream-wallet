{"ast":null,"code":"import { handleException, SyntheticError } from \"./ExceptionsManager\";\nvar ReactFiberErrorDialog = {\n  showErrorDialog: function showErrorDialog(_ref) {\n    var componentStack = _ref.componentStack,\n        errorValue = _ref.error;\n    var error;\n\n    if (errorValue instanceof Error) {\n      error = errorValue;\n    } else if (typeof errorValue === 'string') {\n      error = new SyntheticError(errorValue);\n    } else {\n      error = new SyntheticError('Unspecified error');\n    }\n\n    try {\n      error.componentStack = componentStack;\n      error.isComponentError = true;\n    } catch (_unused) {}\n\n    handleException(error, false);\n    return false;\n  }\n};\nexport default ReactFiberErrorDialog;","map":{"version":3,"sources":["/workspace/stream-pay/node_modules/react-native/Libraries/Core/ReactFiberErrorDialog.js"],"names":["handleException","SyntheticError","ReactFiberErrorDialog","showErrorDialog","componentStack","errorValue","error","Error","isComponentError"],"mappings":"AAUA,SAAQA,eAAR,EAAyBC,cAAzB;AAWA,IAAMC,qBAAqB,GAAG;AAK5BC,EAAAA,eAL4B,iCAKiD;AAAA,QAA5DC,cAA4D,QAA5DA,cAA4D;AAAA,QAArCC,UAAqC,QAA5CC,KAA4C;AAC3E,QAAIA,KAAJ;;AAIA,QAAID,UAAU,YAAYE,KAA1B,EAAiC;AAG/BD,MAAAA,KAAK,GAAID,UAAT;AACD,KAJD,MAIO,IAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAGzCC,MAAAA,KAAK,GAAI,IAAIL,cAAJ,CAAmBI,UAAnB,CAAT;AACD,KAJM,MAIA;AAGLC,MAAAA,KAAK,GAAI,IAAIL,cAAJ,CAAmB,mBAAnB,CAAT;AACD;;AACD,QAAI;AACFK,MAAAA,KAAK,CAACF,cAAN,GAAuBA,cAAvB;AACAE,MAAAA,KAAK,CAACE,gBAAN,GAAyB,IAAzB;AACD,KAHD,CAGE,gBAAM,CAEP;;AAEDR,IAAAA,eAAe,CAACM,KAAD,EAAQ,KAAR,CAAf;AAMA,WAAO,KAAP;AACD;AArC2B,CAA9B;AAwCA,eAAeJ,qBAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport {handleException, SyntheticError} from './ExceptionsManager';\n\nimport type {ExtendedError} from './ExtendedError';\n\nexport type CapturedError = {\n  +componentStack: string,\n  +error: mixed,\n  +errorBoundary: ?{...},\n  ...\n};\n\nconst ReactFiberErrorDialog = {\n  /**\n   * Intercept lifecycle errors and ensure they are shown with the correct stack\n   * trace within the native redbox component.\n   */\n  showErrorDialog({componentStack, error: errorValue}: CapturedError): boolean {\n    let error: ?ExtendedError;\n\n    // Typically, `errorValue` should be an error. However, other values such as\n    // strings (or even null) are sometimes thrown.\n    if (errorValue instanceof Error) {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = (errorValue: ExtendedError);\n    } else if (typeof errorValue === 'string') {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = (new SyntheticError(errorValue): ExtendedError);\n    } else {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = (new SyntheticError('Unspecified error'): ExtendedError);\n    }\n    try {\n      error.componentStack = componentStack;\n      error.isComponentError = true;\n    } catch {\n      // Ignored.\n    }\n\n    handleException(error, false);\n\n    // Return false here to prevent ReactFiberErrorLogger default behavior of\n    // logging error details to console.error. Calls to console.error are\n    // automatically routed to the native redbox controller, which we've already\n    // done above by calling ExceptionsManager.\n    return false;\n  },\n};\n\nexport default ReactFiberErrorDialog;\n"]},"metadata":{},"sourceType":"module"}