{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { memo, useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { BarCodeScanner } from 'expo-barcode-scanner';\n\nfunction QrScanScreen() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref) {\n    var type = _ref.type,\n        data = _ref.data;\n    setScanned(true);\n    alert(\"Bar code with type \" + type + \" and data \" + data + \" has been scanned!\");\n  };\n\n  if (hasPermission === null) {\n    return React.createElement(Text, null, \"Requesting for camera permission\");\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, null, \"No access to camera\");\n  }\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(BarCodeScanner, {\n    onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n    style: StyleSheet.absoluteFillObject\n  }), scanned && React.createElement(Button, {\n    title: 'Tap to Scan Again',\n    onPress: function onPress() {\n      return setScanned(false);\n    }\n  }));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absoluteFillObject: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  }\n});\nexport default memo(QrScanScreen);","map":{"version":3,"sources":["/workspace/stream-pay/screens/QrScanScreen.tsx"],"names":["React","memo","useState","useEffect","BarCodeScanner","QrScanScreen","hasPermission","setHasPermission","scanned","setScanned","requestPermissionsAsync","status","handleBarCodeScanned","type","data","alert","styles","container","undefined","StyleSheet","absoluteFillObject","create","flex","position","top","right","bottom","left"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,QAAtB,EAAgCC,SAAhC,QAAiD,OAAjD;;;;;AAEA,SAASC,cAAT,QAA+B,sBAA/B;;AAEA,SAASC,YAAT,GAAwB;AACvB,kBAA0CH,QAAQ,CAAC,IAAD,CAAlD;AAAA;AAAA,MAAOI,aAAP;AAAA,MAAsBC,gBAAtB;;AACA,mBAA8BL,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOM,OAAP;AAAA,MAAgBC,UAAhB;;AAEAN,EAAAA,SAAS,CAAC,YAAM;AACf,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACyBC,cAAc,CAACM,uBAAf,EADzB;;AAAA;AAAA;AACQC,cAAAA,MADR,yBACQA,MADR;AAEAJ,cAAAA,gBAAgB,CAACI,MAAM,KAAK,SAAZ,CAAhB;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAIA,GALQ,EAKN,EALM,CAAT;;AAOA,MAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,OAAoB;AAAA,QAAjBC,IAAiB,QAAjBA,IAAiB;AAAA,QAAXC,IAAW,QAAXA,IAAW;AAChDL,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAM,IAAAA,KAAK,yBAAuBF,IAAvB,kBAAwCC,IAAxC,wBAAL;AACA,GAHD;;AAKA,MAAIR,aAAa,KAAK,IAAtB,EAA4B;AAC3B,WAAO,oBAAC,IAAD,2CAAP;AACA;;AACD,MAAIA,aAAa,KAAK,KAAtB,EAA6B;AAC5B,WAAO,oBAAC,IAAD,8BAAP;AACA;;AAED,SACC,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEU,MAAM,CAACC;AAApB,KACC,oBAAC,cAAD;AACC,IAAA,gBAAgB,EAAET,OAAO,GAAGU,SAAH,GAAeN,oBADzC;AAEC,IAAA,KAAK,EAAEO,UAAU,CAACC;AAFnB,IADD,EAKEZ,OAAO,IACP,oBAAC,MAAD;AACC,IAAA,KAAK,EAAE,mBADR;AAEC,IAAA,OAAO,EAAE;AAAA,aAAMC,UAAU,CAAC,KAAD,CAAhB;AAAA;AAFV,IANF,CADD;AAcA;;AAED,IAAMO,MAAM,GAAGG,UAAU,CAACE,MAAX,CAAkB;AAChCJ,EAAAA,SAAS,EAAE;AACVK,IAAAA,IAAI,EAAE;AADI,GADqB;AAIhCF,EAAAA,kBAAkB,EAAE;AACnBG,IAAAA,QAAQ,EAAE,UADS;AAEnBC,IAAAA,GAAG,EAAE,CAFc;AAGnBC,IAAAA,KAAK,EAAE,CAHY;AAInBC,IAAAA,MAAM,EAAE,CAJW;AAKnBC,IAAAA,IAAI,EAAE;AALa;AAJY,CAAlB,CAAf;AAaA,eAAe1B,IAAI,CAACI,YAAD,CAAnB","sourcesContent":["import React, { memo, useState, useEffect } from 'react';\nimport { Text, View, StyleSheet, Button } from 'react-native';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\n\nfunction QrScanScreen() {\n\tconst [hasPermission, setHasPermission] = useState(null);\n\tconst [scanned, setScanned] = useState(false);\n\n\tuseEffect(() => {\n\t\t(async () => {\n\t\t\tconst { status } = await BarCodeScanner.requestPermissionsAsync();\n\t\t\tsetHasPermission(status === 'granted');\n\t\t})();\n\t}, []);\n\n\tconst handleBarCodeScanned = ({ type, data }) => {\n\t\tsetScanned(true);\n\t\talert(`Bar code with type ${type} and data ${data} has been scanned!`);\n\t};\n\n\tif (hasPermission === null) {\n\t\treturn <Text>Requesting for camera permission</Text>;\n\t}\n\tif (hasPermission === false) {\n\t\treturn <Text>No access to camera</Text>;\n\t}\n\n\treturn (\n\t\t<View style={styles.container}>\n\t\t\t<BarCodeScanner\n\t\t\t\tonBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n\t\t\t\tstyle={StyleSheet.absoluteFillObject}\n\t\t\t/>\n\t\t\t{scanned && (\n\t\t\t\t<Button\n\t\t\t\t\ttitle={'Tap to Scan Again'}\n\t\t\t\t\tonPress={() => setScanned(false)}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</View>\n\t);\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t},\n\tabsoluteFillObject: {\n\t\tposition: 'absolute',\n\t\ttop: 0,\n\t\tright: 0,\n\t\tbottom: 0,\n\t\tleft: 0,\n\t},\n});\n\nexport default memo(QrScanScreen);\n"]},"metadata":{},"sourceType":"module"}