{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { memo, useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar TestScreen = function TestScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      name = _useState2[0],\n      setName = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      secret = _useState4[0],\n      setSecret = _useState4[1];\n\n  function test2() {\n    var apiKey;\n    return _regeneratorRuntime.async(function test2$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            apiKey = 'f7353e06-2e44-4912-9fff-05929a5681a7';\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(\"https://wallet-server.streamdao.org/api\", {\n              method: 'POST',\n              body: JSON.stringify({\n                url: '/quotes/latest?symbol=sol'\n              }),\n              headers: {\n                'Content-type': 'application/json'\n              }\n            }).then(function (response) {\n              return response.json();\n            }).then(function (res) {\n              return console.log('res', res);\n            }).catch(function (err) {\n              return console.log(err);\n            }));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  useEffect(function () {\n    test2();\n  }, []);\n  return _jsxs(View, {\n    style: [styles.container],\n    children: [_jsx(View, {\n      style: {\n        flex: 2,\n        backgroundColor: 'darkblue'\n      }\n    }), _jsx(View, {\n      style: {\n        flex: 1,\n        backgroundColor: 'red',\n        justifyContent: 'flex-end',\n        alignItems: 'center'\n      },\n      children: _jsxs(View, {\n        style: {\n          flexDirection: 'row'\n        },\n        children: [_jsx(View, {\n          style: {\n            backgroundColor: 'white',\n            width: 100,\n            height: 20,\n            justifyContent: 'center',\n            alignItems: 'center',\n            margin: 8\n          },\n          children: _jsx(Text, {\n            children: \"Hello\"\n          })\n        }), _jsx(View, {\n          style: {\n            backgroundColor: 'white',\n            width: 100,\n            height: 20,\n            justifyContent: 'center',\n            alignItems: 'center',\n            margin: 8\n          },\n          children: _jsx(Text, {\n            children: \"Hello\"\n          })\n        })]\n      })\n    }), _jsx(View, {\n      style: {\n        flex: 3,\n        backgroundColor: 'blue'\n      }\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});\nexport default memo(TestScreen);","map":{"version":3,"names":["React","memo","useState","useEffect","TestScreen","navigation","name","setName","secret","setSecret","test2","apiKey","fetch","method","body","JSON","stringify","url","headers","then","response","json","res","console","log","catch","err","styles","container","flex","backgroundColor","justifyContent","alignItems","flexDirection","width","height","margin","StyleSheet","create"],"sources":["/workspace/stream-wallet/screens/TestScreen.tsx"],"sourcesContent":["import React, { memo, useState, useEffect } from 'react';\nimport { SafeAreaView, Text } from 'react-native';\nimport {\n\tBackground,\n\tThemeButton,\n\tBackButton,\n\tParagraph,\n\tTextInput,\n\tHeader,\n} from '../components';\nimport { Navigation } from '../types';\nimport { StatusBar } from 'expo-status-bar';\nimport { View, StyleSheet } from 'react-native';\nimport { DashboardScreen } from '.';\nimport { AreaChart, Grid } from 'react-native-svg-charts';\nimport * as shape from 'd3-shape';\nimport { Shadow } from 'react-native-shadow-2';\nimport { Avatar, Card, IconButton } from 'react-native-paper';\n\ntype Props = {\n\tnavigation: Navigation;\n};\n\nconst TestScreen = ({ navigation }: Props) => {\n\tconst [name, setName] = useState('');\n\tconst [secret, setSecret] = useState('');\n\n\tasync function test2() {\n\t\tconst apiKey = 'f7353e06-2e44-4912-9fff-05929a5681a7';\n\t\tawait fetch(\n\t\t\t`https://wallet-server.streamdao.org/api`,\n\t\t\t{\n\t\t\t\tmethod: 'POST',\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\turl: '/quotes/latest?symbol=sol',\n\t\t\t\t}),\n\t\t\t\theaders: { 'Content-type': 'application/json' },\n\t\t\t},\n\t\t)\n\t\t\t.then((response) => response.json())\n\t\t\t.then((res) => console.log('res', res))\n\t\t\t.catch((err) => console.log(err));\n\t}\n\n\tuseEffect(() => {\n\t\ttest2();\n\t}, []);\n\n\treturn (\n\t\t// <SafeAreaView style={{margin: 16}}>\n\n\t\t<View style={[styles.container]}>\n\t\t\t<View style={{ flex: 2, backgroundColor: 'darkblue' }} />\n\t\t\t<View\n\t\t\t\tstyle={{\n\t\t\t\t\tflex: 1,\n\t\t\t\t\tbackgroundColor: 'red',\n\t\t\t\t\tjustifyContent: 'flex-end',\n\t\t\t\t\talignItems: 'center',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<View style={{ flexDirection: 'row' }}>\n\t\t\t\t\t<View\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tbackgroundColor: 'white',\n\t\t\t\t\t\t\twidth: 100,\n\t\t\t\t\t\t\theight: 20,\n\t\t\t\t\t\t\tjustifyContent: 'center',\n\t\t\t\t\t\t\talignItems: 'center',\n\t\t\t\t\t\t\tmargin: 8,\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Text>Hello</Text>\n\t\t\t\t\t</View>\n\t\t\t\t\t<View\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tbackgroundColor: 'white',\n\t\t\t\t\t\t\twidth: 100,\n\t\t\t\t\t\t\theight: 20,\n\t\t\t\t\t\t\tjustifyContent: 'center',\n\t\t\t\t\t\t\talignItems: 'center',\n\t\t\t\t\t\t\tmargin: 8,\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Text>Hello</Text>\n\t\t\t\t\t</View>\n\t\t\t\t</View>\n\t\t\t</View>\n\t\t\t<View style={{ flex: 3, backgroundColor: 'blue' }} />\n\t\t</View>\n\t);\n};\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\t// padding: 20,\n\t},\n});\n\nexport default memo(TestScreen);\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,QAAtB,EAAgCC,SAAhC,QAAiD,OAAjD;;;;;;;AAuBA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAA2B;EAAA,IAAxBC,UAAwB,QAAxBA,UAAwB;;EAC7C,gBAAwBH,QAAQ,CAAC,EAAD,CAAhC;EAAA;EAAA,IAAOI,IAAP;EAAA,IAAaC,OAAb;;EACA,iBAA4BL,QAAQ,CAAC,EAAD,CAApC;EAAA;EAAA,IAAOM,MAAP;EAAA,IAAeC,SAAf;;EAEA,SAAeC,KAAf;IAAA;IAAA;MAAA;QAAA;UAAA;YACOC,MADP,GACgB,sCADhB;YAAA;YAAA,iCAEOC,KAAK,4CAEV;cACCC,MAAM,EAAE,MADT;cAECC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;gBACpBC,GAAG,EAAE;cADe,CAAf,CAFP;cAKCC,OAAO,EAAE;gBAAE,gBAAgB;cAAlB;YALV,CAFU,CAAL,CAUJC,IAVI,CAUC,UAACC,QAAD;cAAA,OAAcA,QAAQ,CAACC,IAAT,EAAd;YAAA,CAVD,EAWJF,IAXI,CAWC,UAACG,GAAD;cAAA,OAASC,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,GAAnB,CAAT;YAAA,CAXD,EAYJG,KAZI,CAYE,UAACC,GAAD;cAAA,OAASH,OAAO,CAACC,GAAR,CAAYE,GAAZ,CAAT;YAAA,CAZF,CAFP;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;;EAiBAvB,SAAS,CAAC,YAAM;IACfO,KAAK;EACL,CAFQ,EAEN,EAFM,CAAT;EAIA,OAGC,MAAC,IAAD;IAAM,KAAK,EAAE,CAACiB,MAAM,CAACC,SAAR,CAAb;IAAA,WACC,KAAC,IAAD;MAAM,KAAK,EAAE;QAAEC,IAAI,EAAE,CAAR;QAAWC,eAAe,EAAE;MAA5B;IAAb,EADD,EAEC,KAAC,IAAD;MACC,KAAK,EAAE;QACND,IAAI,EAAE,CADA;QAENC,eAAe,EAAE,KAFX;QAGNC,cAAc,EAAE,UAHV;QAINC,UAAU,EAAE;MAJN,CADR;MAAA,UAQC,MAAC,IAAD;QAAM,KAAK,EAAE;UAAEC,aAAa,EAAE;QAAjB,CAAb;QAAA,WACC,KAAC,IAAD;UACC,KAAK,EAAE;YACNH,eAAe,EAAE,OADX;YAENI,KAAK,EAAE,GAFD;YAGNC,MAAM,EAAE,EAHF;YAINJ,cAAc,EAAE,QAJV;YAKNC,UAAU,EAAE,QALN;YAMNI,MAAM,EAAE;UANF,CADR;UAAA,UAUC,KAAC,IAAD;YAAA;UAAA;QAVD,EADD,EAaC,KAAC,IAAD;UACC,KAAK,EAAE;YACNN,eAAe,EAAE,OADX;YAENI,KAAK,EAAE,GAFD;YAGNC,MAAM,EAAE,EAHF;YAINJ,cAAc,EAAE,QAJV;YAKNC,UAAU,EAAE,QALN;YAMNI,MAAM,EAAE;UANF,CADR;UAAA,UAUC,KAAC,IAAD;YAAA;UAAA;QAVD,EAbD;MAAA;IARD,EAFD,EAqCC,KAAC,IAAD;MAAM,KAAK,EAAE;QAAEP,IAAI,EAAE,CAAR;QAAWC,eAAe,EAAE;MAA5B;IAAb,EArCD;EAAA,EAHD;AA2CA,CApED;;AAsEA,IAAMH,MAAM,GAAGU,UAAU,CAACC,MAAX,CAAkB;EAChCV,SAAS,EAAE;IACVC,IAAI,EAAE;EADI;AADqB,CAAlB,CAAf;AAOA,eAAe5B,IAAI,CAACG,UAAD,CAAnB"},"metadata":{},"sourceType":"module"}