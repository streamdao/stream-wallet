{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar supportsFullscreenAPI = function supportsFullscreenAPI(element) {\n  return 'requestFullscreen' in element;\n};\n\nvar supportsWebkitFullscreenAPI = function supportsWebkitFullscreenAPI(element) {\n  return 'webkitEnterFullScreen' in element;\n};\n\nvar supportsMsFullscreenAPI = function supportsMsFullscreenAPI(element) {\n  return 'msRequestFullscreen' in element;\n};\n\nvar supportsWebkitFullscreenChangeEvent = function supportsWebkitFullscreenChangeEvent() {\n  return supportsEvent('video', 'webkitfullscreenchange');\n};\n\nfunction addEventListener(element, eventName, listener) {\n  element.addEventListener(eventName, listener);\n  return function () {\n    return element.removeEventListener(eventName, listener);\n  };\n}\n\nvar supportsEvent = function supportsEvent(elementName, eventName) {\n  var element = document.createElement(elementName);\n  element.setAttribute('on' + eventName, 'return;');\n  return typeof element['on' + eventName] === 'function';\n};\n\nexport function requestFullscreen(element) {\n  var _element$webkitEnterF, _element$msRequestFul;\n\n  return _regeneratorRuntime.async(function requestFullscreen$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!supportsFullscreenAPI(element)) {\n            _context.next = 4;\n            break;\n          }\n\n          return _context.abrupt(\"return\", element.requestFullscreen());\n\n        case 4:\n          if (!supportsWebkitFullscreenAPI(element)) {\n            _context.next = 8;\n            break;\n          }\n\n          (_element$webkitEnterF = element['webkitEnterFullScreen']) == null ? void 0 : _element$webkitEnterF.call(element);\n          _context.next = 13;\n          break;\n\n        case 8:\n          if (!supportsMsFullscreenAPI(element)) {\n            _context.next = 12;\n            break;\n          }\n\n          (_element$msRequestFul = element['msRequestFullscreen']) == null ? void 0 : _element$msRequestFul.call(element);\n          _context.next = 13;\n          break;\n\n        case 12:\n          throw new Error('Fullscreen not supported');\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function exitFullscreen(element) {\n  var _element$webkitExitFu, _document$msExitFulls, _document;\n\n  return _regeneratorRuntime.async(function exitFullscreen$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!supportsFullscreenAPI(element)) {\n            _context2.next = 4;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", document.exitFullscreen());\n\n        case 4:\n          if (!supportsWebkitFullscreenAPI(element)) {\n            _context2.next = 8;\n            break;\n          }\n\n          (_element$webkitExitFu = element['webkitExitFullScreen']) == null ? void 0 : _element$webkitExitFu.call(element);\n          _context2.next = 13;\n          break;\n\n        case 8:\n          if (!supportsMsFullscreenAPI(element)) {\n            _context2.next = 12;\n            break;\n          }\n\n          (_document$msExitFulls = (_document = document)['msExitFullscreen']) == null ? void 0 : _document$msExitFulls.call(_document);\n          _context2.next = 13;\n          break;\n\n        case 12:\n          throw new Error('Fullscreen not supported');\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function addFullscreenListener(element, callback) {\n  if (supportsFullscreenAPI(element)) {\n    return addEventListener(element, 'fullscreenchange', function (event) {\n      return callback(document.fullscreenElement === event.target);\n    });\n  } else if (supportsWebkitFullscreenAPI(element) && supportsWebkitFullscreenChangeEvent()) {\n    return addEventListener(element, 'webkitfullscreenchange', function (event) {\n      return callback(document['webkitFullscreenElement'] === event.target);\n    });\n  } else if (supportsWebkitFullscreenAPI(element)) {\n    var removeBeginListener = addEventListener(element, 'webkitbeginfullscreen', function () {\n      return callback(true);\n    });\n    var removeEndListener = addEventListener(element, 'webkitendfullscreen', function () {\n      return callback(false);\n    });\n    return function () {\n      removeBeginListener();\n      removeEndListener();\n    };\n  } else if (supportsMsFullscreenAPI(element)) {\n    return addEventListener(document, 'MSFullscreenChange', function (event) {\n      return callback(document['msFullscreenElement'] === event.target);\n    });\n  } else {\n    return function () {};\n  }\n}","map":{"version":3,"sources":["../src/FullscreenUtils.web.ts"],"names":[],"mappings":";;AAKA,IAAM,qBAAqB,GAAG,SAAxB,qBAAwB,CAAC,OAAD;EAAA,OAC5B,uBAAuB,OADK;AAAA,CAA9B;;AAOA,IAAM,2BAA2B,GAAG,SAA9B,2BAA8B,CAAC,OAAD;EAAA,OAClC,2BAA2B,OADO;AAAA,CAApC;;AAOA,IAAM,uBAAuB,GAAG,SAA1B,uBAA0B,CAAC,OAAD;EAAA,OAC9B,yBAAyB,OADK;AAAA,CAAhC;;AAQA,IAAM,mCAAmC,GAAG,SAAtC,mCAAsC;EAAA,OAC1C,aAAa,CAAC,OAAD,EAAU,wBAAV,CAD6B;AAAA,CAA5C;;AASA,SAAS,gBAAT,CACE,OADF,EAEE,SAFF,EAGE,QAHF,EAG8C;EAE5C,OAAO,CAAC,gBAAR,CAAyB,SAAzB,EAAoC,QAApC;EACA,OAAO;IAAA,OAAM,OAAO,CAAC,mBAAR,CAA4B,SAA5B,EAAuC,QAAvC,CAAN;EAAA,CAAP;AACD;;AAKD,IAAM,aAAa,GAAG,SAAhB,aAAgB,CAAC,WAAD,EAAsB,SAAtB,EAAoD;EAKxE,IAAM,OAAO,GAAG,QAAQ,CAAC,aAAT,CAAuB,WAAvB,CAAhB;EACA,OAAO,CAAC,YAAR,CAAqB,OAAO,SAA5B,EAAuC,SAAvC;EACA,OAAO,OAAO,OAAO,CAAC,OAAO,SAAR,CAAd,KAAqC,UAA5C;AACD,CARD;;AAaA,OAAO,SAAe,iBAAf,CAAiC,OAAjC;EAAA;;EAAA;IAAA;MAAA;QAAA;UAAA,KACD,qBAAqB,CAAC,OAAD,CADpB;YAAA;YAAA;UAAA;;UAAA,iCAEI,OAAO,CAAC,iBAAR,EAFJ;;QAAA;UAAA,KAGM,2BAA2B,CAAC,OAAD,CAHjC;YAAA;YAAA;UAAA;;UAKH,yBAAA,OAAO,CAAC,uBAAD,CAAP,gDAAA,OAAO;UALJ;UAAA;;QAAA;UAAA,KAMM,uBAAuB,CAAC,OAAD,CAN7B;YAAA;YAAA;UAAA;;UAQH,yBAAA,OAAO,CAAC,qBAAD,CAAP,gDAAA,OAAO;UARJ;UAAA;;QAAA;UAAA,MAUG,IAAI,KAAJ,CAAU,0BAAV,CAVH;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAkBP,OAAO,SAAe,cAAf,CAA8B,OAA9B;EAAA;;EAAA;IAAA;MAAA;QAAA;UAAA,KACD,qBAAqB,CAAC,OAAD,CADpB;YAAA;YAAA;UAAA;;UAAA,kCAEI,QAAQ,CAAC,cAAT,EAFJ;;QAAA;UAAA,KAGM,2BAA2B,CAAC,OAAD,CAHjC;YAAA;YAAA;UAAA;;UAKH,yBAAA,OAAO,CAAC,sBAAD,CAAP,gDAAA,OAAO;UALJ;UAAA;;QAAA;UAAA,KAMM,uBAAuB,CAAC,OAAD,CAN7B;YAAA;YAAA;UAAA;;UAQH,sCAAA,QAAQ,EAAC,kBAAD,CAAR;UARG;UAAA;;QAAA;UAAA,MAUG,IAAI,KAAJ,CAAU,0BAAV,CAVH;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAmBP,OAAM,SAAU,qBAAV,CACJ,OADI,EAEJ,QAFI,EAEqC;EAEzC,IAAI,qBAAqB,CAAC,OAAD,CAAzB,EAAoC;IAElC,OAAO,gBAAgB,CAAC,OAAD,EAAU,kBAAV,EAA8B,UAAC,KAAD;MAAA,OACnD,QAAQ,CAAC,QAAQ,CAAC,iBAAT,KAA+B,KAAK,CAAC,MAAtC,CAD2C;IAAA,CAA9B,CAAvB;EAGD,CALD,MAKO,IAAI,2BAA2B,CAAC,OAAD,CAA3B,IAAwC,mCAAmC,EAA/E,EAAmF;IAExF,OAAO,gBAAgB,CAAC,OAAD,EAAU,wBAAV,EAAoC,UAAC,KAAD;MAAA,OACzD,QAAQ,CAAC,QAAQ,CAAC,yBAAD,CAAR,KAAwC,KAAK,CAAC,MAA/C,CADiD;IAAA,CAApC,CAAvB;EAGD,CALM,MAKA,IAAI,2BAA2B,CAAC,OAAD,CAA/B,EAA0C;IAE/C,IAAM,mBAAmB,GAAG,gBAAgB,CAAC,OAAD,EAAU,uBAAV,EAAmC;MAAA,OAC7E,QAAQ,CAAC,IAAD,CADqE;IAAA,CAAnC,CAA5C;IAGA,IAAM,iBAAiB,GAAG,gBAAgB,CAAC,OAAD,EAAU,qBAAV,EAAiC;MAAA,OACzE,QAAQ,CAAC,KAAD,CADiE;IAAA,CAAjC,CAA1C;IAGA,OAAO,YAAK;MACV,mBAAmB;MACnB,iBAAiB;IAClB,CAHD;EAID,CAZM,MAYA,IAAI,uBAAuB,CAAC,OAAD,CAA3B,EAAsC;IAE3C,OAAO,gBAAgB,CAAC,QAAD,EAAW,oBAAX,EAAiC,UAAC,KAAD;MAAA,OACtD,QAAQ,CAAC,QAAQ,CAAC,qBAAD,CAAR,KAAoC,KAAK,CAAC,MAA3C,CAD8C;IAAA,CAAjC,CAAvB;EAGD,CALM,MAKA;IACL,OAAO,YAAK,CAAG,CAAf;EACD;AACF","sourcesContent":["/**\n * Detect if the browser supports the standard fullscreen API on the given\n * element:\n * https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\n */\nconst supportsFullscreenAPI = (element: HTMLMediaElement): boolean =>\n  'requestFullscreen' in element;\n\n/**\n * Detect if the browser supports the non-standard webkit fullscreen API on the\n * given element (looking at you, Safari).\n */\nconst supportsWebkitFullscreenAPI = (element: HTMLMediaElement): boolean =>\n  'webkitEnterFullScreen' in element;\n\n/**\n * Detect if the browser supports the non-standard ms fullscreen API on the\n * given element (looking at you, IE11).\n */\nconst supportsMsFullscreenAPI = (element: HTMLMediaElement): boolean =>\n  'msRequestFullscreen' in element;\n\n/**\n * Detect if the browser supports the `webkitFullscreenChange` event. This is\n * a non-standard event added to Safari on macOS by Apple:\n * https://developer.apple.com/documentation/webkitjs/document/1631998-onwebkitfullscreenchange\n */\nconst supportsWebkitFullscreenChangeEvent = (): boolean =>\n  supportsEvent('video', 'webkitfullscreenchange');\n\n/**\n * A helper that adds an event listener to an element. The key value-add over\n * the native addEventListener is that it returns a function that will remove\n * the event listener. This allows the setup and teardown logic for a listener\n * to be easily colocated.\n */\nfunction addEventListener(\n  element: Document | HTMLElement,\n  eventName: string,\n  listener: EventListenerOrEventListenerObject\n): () => any {\n  element.addEventListener(eventName, listener);\n  return () => element.removeEventListener(eventName, listener);\n}\n\n/**\n * Detect if the browser supports an event on a particular element type.\n */\nconst supportsEvent = (elementName: string, eventName: string): boolean => {\n  // Detect if the browser supports the event by attempting to add a handler\n  // attribute for that event to the provided element. If the event is supported\n  // then the browser will accept the attribute and report the type of the\n  // attribute as \"function\". See: https://stackoverflow.com/a/4562426/2747759\n  const element = document.createElement(elementName);\n  element.setAttribute('on' + eventName, 'return;');\n  return typeof element['on' + eventName] === 'function';\n};\n\n/**\n * Switches a video element into fullscreen.\n */\nexport async function requestFullscreen(element: HTMLMediaElement): Promise<void> {\n  if (supportsFullscreenAPI(element)) {\n    return element.requestFullscreen();\n  } else if (supportsWebkitFullscreenAPI(element)) {\n    // This API is synchronous so no need to return the result\n    element['webkitEnterFullScreen']?.();\n  } else if (supportsMsFullscreenAPI(element)) {\n    // This API is synchronous so no need to return the result\n    element['msRequestFullscreen']?.();\n  } else {\n    throw new Error('Fullscreen not supported');\n  }\n}\n\n/**\n * Switches a video element out of fullscreen.\n */\n\nexport async function exitFullscreen(element: HTMLMediaElement): Promise<void> {\n  if (supportsFullscreenAPI(element)) {\n    return document.exitFullscreen();\n  } else if (supportsWebkitFullscreenAPI(element)) {\n    // This API is synchronous so no need to return the result\n    element['webkitExitFullScreen']?.();\n  } else if (supportsMsFullscreenAPI(element)) {\n    // This API is synchronous so no need to return the result\n    document['msExitFullscreen']?.();\n  } else {\n    throw new Error('Fullscreen not supported');\n  }\n}\n\n/**\n * Listens for fullscreen change events on a video element. The provided\n * callback will be called with `true` when the video is switched into\n * fullscreen and `false` when the video is switched out of fullscreen.\n */\nexport function addFullscreenListener(\n  element: HTMLVideoElement,\n  callback: (isFullscreen: boolean) => void\n): () => any {\n  if (supportsFullscreenAPI(element)) {\n    // Used by browsers that support the official spec\n    return addEventListener(element, 'fullscreenchange', (event) =>\n      callback(document.fullscreenElement === event.target)\n    );\n  } else if (supportsWebkitFullscreenAPI(element) && supportsWebkitFullscreenChangeEvent()) {\n    // Used by Safari on macOS\n    return addEventListener(element, 'webkitfullscreenchange', (event) =>\n      callback(document['webkitFullscreenElement'] === event.target)\n    );\n  } else if (supportsWebkitFullscreenAPI(element)) {\n    // Used by Safari on iOS\n    const removeBeginListener = addEventListener(element, 'webkitbeginfullscreen', () =>\n      callback(true)\n    );\n    const removeEndListener = addEventListener(element, 'webkitendfullscreen', () =>\n      callback(false)\n    );\n    return () => {\n      removeBeginListener();\n      removeEndListener();\n    };\n  } else if (supportsMsFullscreenAPI(element)) {\n    // Used by IE11\n    return addEventListener(document, 'MSFullscreenChange', (event) =>\n      callback(document['msFullscreenElement'] === event.target)\n    );\n  } else {\n    return () => {};\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}