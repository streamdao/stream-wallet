{"ast":null,"code":"export var animationParameter = function () {\n  var _f = function _f(animationParam) {\n    if (typeof animationParam === \"number\") {\n      throw new Error(\"Expected Animation as parameter\");\n    }\n\n    return typeof animationParam === \"function\" ? animationParam() : animationParam;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function animationParameter(animationParam){if(typeof animationParam===\\\"number\\\"){throw new Error(\\\"Expected Animation as parameter\\\");}return typeof animationParam===\\\"function\\\"?animationParam():animationParam;}\";\n  _f.__workletHash = 16964105267043;\n  _f.__location = \"/workspace/stream-wallet/node_modules/react-native-redash/lib/module/Animations.js (1:30)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var defineAnimation = function () {\n  var _f = function _f(factory) {\n    if (_WORKLET) {\n      return factory();\n    }\n\n    return factory;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function defineAnimation(factory){if(_WORKLET){return factory();}return factory;}\";\n  _f.__workletHash = 2039129594575;\n  _f.__location = \"/workspace/stream-wallet/node_modules/react-native-redash/lib/module/Animations.js (1:276)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var withPause = function () {\n  var _f = function _f(animationParam, paused) {\n    return defineAnimation(function () {\n      var _f = function _f() {\n        var nextAnimation = animationParameter(animationParam);\n\n        var onFrame = function onFrame(state, now) {\n          var lastTimestamp = state.lastTimestamp,\n              elapsed = state.elapsed;\n\n          if (paused.value) {\n            state.elapsed = now - lastTimestamp;\n            return false;\n          }\n\n          var dt = now - elapsed;\n          var finished = nextAnimation.onFrame(nextAnimation, dt);\n          state.current = nextAnimation.current;\n          state.lastTimestamp = dt;\n          return finished;\n        };\n\n        var onStart = function onStart(state, value, now, previousState) {\n          state.lastTimestamp = now;\n          state.elapsed = 0;\n          nextAnimation.onStart(nextAnimation, value, now, previousState);\n        };\n\n        return {\n          onFrame: onFrame,\n          onStart: onStart,\n          callback: nextAnimation.callback\n        };\n      };\n\n      _f._closure = {\n        animationParameter: animationParameter,\n        animationParam: animationParam,\n        paused: paused\n      };\n      _f.asString = \"function _f(){const{animationParameter,animationParam,paused}=jsThis._closure;{var nextAnimation=animationParameter(animationParam);var onFrame=function onFrame(state,now){var lastTimestamp=state.lastTimestamp,elapsed=state.elapsed;if(paused.value){state.elapsed=now-lastTimestamp;return false;}var dt=now-elapsed;var finished=nextAnimation.onFrame(nextAnimation,dt);state.current=nextAnimation.current;state.lastTimestamp=dt;return finished;};var onStart=function onStart(state,value,now,previousState){state.lastTimestamp=now;state.elapsed=0;nextAnimation.onStart(nextAnimation,value,now,previousState);};return{onFrame:onFrame,onStart:onStart,callback:nextAnimation.callback};}}\";\n      _f.__workletHash = 17191968177356;\n      _f.__location = \"/workspace/stream-wallet/node_modules/react-native-redash/lib/module/Animations.js (1:464)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }());\n  };\n\n  _f._closure = {\n    defineAnimation: defineAnimation,\n    animationParameter: animationParameter\n  };\n  _f.asString = \"function withPause(animationParam,paused){const{defineAnimation,animationParameter}=jsThis._closure;{return defineAnimation(function(){\\\"worklet\\\";var nextAnimation=animationParameter(animationParam);var onFrame=function onFrame(state,now){var lastTimestamp=state.lastTimestamp,elapsed=state.elapsed;if(paused.value){state.elapsed=now-lastTimestamp;return false;}var dt=now-elapsed;var finished=nextAnimation.onFrame(nextAnimation,dt);state.current=nextAnimation.current;state.lastTimestamp=dt;return finished;};var onStart=function onStart(state,value,now,previousState){state.lastTimestamp=now;state.elapsed=0;nextAnimation.onStart(nextAnimation,value,now,previousState);};return{onFrame:onFrame,onStart:onStart,callback:nextAnimation.callback};});}}\";\n  _f.__workletHash = 938342334711;\n  _f.__location = \"/workspace/stream-wallet/node_modules/react-native-redash/lib/module/Animations.js (1:389)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var withBouncing = function () {\n  var _f = function _f(animationParam, lowerBound, upperBound) {\n    return defineAnimation(function () {\n      var _f = function _f() {\n        var nextAnimation = animationParameter(animationParam);\n\n        var onFrame = function onFrame(state, now) {\n          var finished = nextAnimation.onFrame(nextAnimation, now);\n          var velocity = nextAnimation.velocity,\n              current = nextAnimation.current;\n          state.current = current;\n\n          if (velocity < 0 && state.current <= lowerBound || velocity > 0 && state.current >= upperBound) {\n            state.current = velocity < 0 ? lowerBound : upperBound;\n            nextAnimation.velocity *= -0.5;\n          }\n\n          return finished;\n        };\n\n        var onStart = function onStart(_state, value, now, previousState) {\n          nextAnimation.onStart(nextAnimation, value, now, previousState);\n        };\n\n        return {\n          onFrame: onFrame,\n          onStart: onStart,\n          callback: nextAnimation.callback\n        };\n      };\n\n      _f._closure = {\n        animationParameter: animationParameter,\n        animationParam: animationParam,\n        lowerBound: lowerBound,\n        upperBound: upperBound\n      };\n      _f.asString = \"function _f(){const{animationParameter,animationParam,lowerBound,upperBound}=jsThis._closure;{var nextAnimation=animationParameter(animationParam);var onFrame=function onFrame(state,now){var finished=nextAnimation.onFrame(nextAnimation,now);var velocity=nextAnimation.velocity,current=nextAnimation.current;state.current=current;if(velocity<0&&state.current<=lowerBound||velocity>0&&state.current>=upperBound){state.current=velocity<0?lowerBound:upperBound;nextAnimation.velocity*=-0.5;}return finished;};var onStart=function onStart(_state,value,now,previousState){nextAnimation.onStart(nextAnimation,value,now,previousState);};return{onFrame:onFrame,onStart:onStart,callback:nextAnimation.callback};}}\";\n      _f.__workletHash = 11962071797711;\n      _f.__location = \"/workspace/stream-wallet/node_modules/react-native-redash/lib/module/Animations.js (1:1207)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }());\n  };\n\n  _f._closure = {\n    defineAnimation: defineAnimation,\n    animationParameter: animationParameter\n  };\n  _f.asString = \"function withBouncing(animationParam,lowerBound,upperBound){const{defineAnimation,animationParameter}=jsThis._closure;{return defineAnimation(function(){\\\"worklet\\\";var nextAnimation=animationParameter(animationParam);var onFrame=function onFrame(state,now){var finished=nextAnimation.onFrame(nextAnimation,now);var velocity=nextAnimation.velocity,current=nextAnimation.current;state.current=current;if(velocity<0&&state.current<=lowerBound||velocity>0&&state.current>=upperBound){state.current=velocity<0?lowerBound:upperBound;nextAnimation.velocity*=-0.5;}return finished;};var onStart=function onStart(_state,value,now,previousState){nextAnimation.onStart(nextAnimation,value,now,previousState);};return{onFrame:onFrame,onStart:onStart,callback:nextAnimation.callback};});}}\";\n  _f.__workletHash = 4571757579923;\n  _f.__location = \"/workspace/stream-wallet/node_modules/react-native-redash/lib/module/Animations.js (1:1114)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();","map":{"version":3,"sources":["Animations.ts"],"names":["animationParameter","animationParam","defineAnimation","factory","withPause","nextAnimation","onFrame","lastTimestamp","elapsed","state","paused","now","dt","finished","onStart","callback","withBouncing","velocity","current"],"mappings":"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","sourcesContent":["import type Animated from \"react-native-reanimated\";\n\ndeclare let _WORKLET: boolean;\n\nexport interface AnimationState {\n  current: number;\n}\n\nexport interface PhysicsAnimationState extends AnimationState {\n  velocity: number;\n}\n\nexport type Animation<\n  State extends AnimationState = AnimationState,\n  PrevState = State\n> = {\n  onFrame: (animation: State, now: number) => boolean;\n  onStart: (\n    animation: State,\n    value: number,\n    now: number,\n    lastAnimation: PrevState\n  ) => void;\n  callback?: () => void;\n} & State;\n\nexport type AnimationParameter<State extends AnimationState = AnimationState> =\n  | Animation<State>\n  | (() => Animation<State>)\n  | number;\n\n/**\n *  @summary Access animations passed as parameters safely on both the UI and JS thread with the proper static types.\n *  Animations can receive other animations as parameter.\n */\nexport const animationParameter = <\n  State extends AnimationState = AnimationState\n>(\n  animationParam: AnimationParameter<State>\n) => {\n  \"worklet\";\n  if (typeof animationParam === \"number\") {\n    throw new Error(\"Expected Animation as parameter\");\n  }\n  return typeof animationParam === \"function\"\n    ? animationParam()\n    : animationParam;\n};\n\n/**\n *  @summary Declare custom animations that can be invoked on both the JS and UI thread.\n *  @example\n *  defineAnimation(() => {\n      \"worklet\";\n      // ...animation code\n      return {\n        animation,\n       start\n      }\n    });\n * @worklet\n */\nexport const defineAnimation = <\n  S extends AnimationState = AnimationState,\n  Prev extends AnimationState = AnimationState\n>(\n  factory: () => Omit<Animation<S, Prev>, keyof S>\n) => {\n  \"worklet\";\n  if (_WORKLET) {\n    return (factory() as unknown) as number;\n  }\n  return (factory as unknown) as number;\n};\n\ninterface PausableAnimation extends AnimationState {\n  lastTimestamp: number;\n  elapsed: number;\n}\n\n/**\n *  @summary Make an animation pausable. The state of the animation (paused or not)\n *  is controlled by a boolean shared value.\n *  @example\n    const progress = useSharedValue(0);\n    const paused = useSharedValue(false);\n    useEffect(() => {\n      progress.value = withPause(withLoop(withTiming(1)), paused);\n    }, []);\n  * @worklet\n */\nexport const withPause = (\n  animationParam: AnimationParameter,\n  paused: Animated.SharedValue<boolean>\n) => {\n  \"worklet\";\n  return defineAnimation<PausableAnimation>(() => {\n    \"worklet\";\n    const nextAnimation = animationParameter(animationParam);\n    const onFrame = (state: PausableAnimation, now: number) => {\n      const { lastTimestamp, elapsed } = state;\n      if (paused.value) {\n        state.elapsed = now - lastTimestamp;\n        return false;\n      }\n      const dt = now - elapsed;\n      const finished = nextAnimation.onFrame(nextAnimation, dt);\n      state.current = nextAnimation.current;\n      state.lastTimestamp = dt;\n      return finished;\n    };\n    const onStart = (\n      state: PausableAnimation,\n      value: number,\n      now: number,\n      previousState: AnimationState\n    ) => {\n      state.lastTimestamp = now;\n      state.elapsed = 0;\n      nextAnimation.onStart(nextAnimation, value, now, previousState);\n    };\n    return {\n      onFrame,\n      onStart,\n      callback: nextAnimation.callback,\n    };\n  });\n};\n\n/**\n *  @summary Add a bouncing behavior to a physics-based animation.\n *  An animation is defined as being physics-based if it contains a velocity in its state.\n *  @example\n    // will bounce if the animations hits the position 0 or 100\n    withBouncing(withDecay({ velocity }), 0, 100)\n * @worklet\n */\nexport const withBouncing = (\n  animationParam: AnimationParameter<PhysicsAnimationState>,\n  lowerBound: number,\n  upperBound: number\n): number => {\n  \"worklet\";\n  return defineAnimation<PhysicsAnimationState, PhysicsAnimationState>(() => {\n    \"worklet\";\n    const nextAnimation = animationParameter(animationParam);\n    const onFrame = (state: PhysicsAnimationState, now: number) => {\n      const finished = nextAnimation.onFrame(nextAnimation, now);\n      const { velocity, current } = nextAnimation;\n      state.current = current;\n      if (\n        (velocity < 0 && state.current <= lowerBound) ||\n        (velocity > 0 && state.current >= upperBound)\n      ) {\n        state.current = velocity < 0 ? lowerBound : upperBound;\n        nextAnimation.velocity *= -0.5;\n      }\n      return finished;\n    };\n    const onStart = (\n      _state: PhysicsAnimationState,\n      value: number,\n      now: number,\n      previousState: PhysicsAnimationState\n    ) => {\n      nextAnimation.onStart(nextAnimation, value, now, previousState);\n    };\n    return {\n      onFrame,\n      onStart,\n      callback: nextAnimation.callback,\n    };\n  });\n};\n"]},"metadata":{},"sourceType":"module"}