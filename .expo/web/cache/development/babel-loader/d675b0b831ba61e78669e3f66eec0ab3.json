{"ast":null,"code":"import { createViewConfig } from \"./ViewConfig\";\nimport UIManager from \"../ReactNative/UIManager\";\nimport ReactNativeViewConfigRegistry from \"../Renderer/shims/ReactNativeViewConfigRegistry\";\nimport getNativeComponentAttributes from \"../ReactNative/getNativeComponentAttributes\";\nimport verifyComponentAttributeEquivalence from \"../Utilities/verifyComponentAttributeEquivalence\";\nimport invariant from 'invariant';\nimport * as React from 'react';\nvar getRuntimeConfig;\nvar componentNameToExists = new Map();\nexport function setRuntimeConfigProvider(runtimeConfigProvider) {\n  invariant(getRuntimeConfig == null, 'NativeComponentRegistry.setRuntimeConfigProvider() called more than once.');\n  getRuntimeConfig = runtimeConfigProvider;\n}\nexport function get(name, viewConfigProvider) {\n  ReactNativeViewConfigRegistry.register(name, function () {\n    var _getRuntimeConfig;\n\n    var _ref = (_getRuntimeConfig = getRuntimeConfig == null ? void 0 : getRuntimeConfig(name)) != null ? _getRuntimeConfig : {\n      native: true,\n      verify: false\n    },\n        native = _ref.native,\n        verify = _ref.verify;\n\n    var viewConfig = native ? getNativeComponentAttributes(name) : createViewConfig(viewConfigProvider());\n\n    if (verify) {\n      if (native) {\n        verifyComponentAttributeEquivalence(viewConfig, createViewConfig(viewConfigProvider()));\n      } else {\n        verifyComponentAttributeEquivalence(getNativeComponentAttributes(name), viewConfig);\n      }\n    }\n\n    return viewConfig;\n  });\n  return name;\n}\nexport function getWithFallback_DEPRECATED(name, viewConfigProvider) {\n  if (getRuntimeConfig == null) {\n    if (hasNativeViewConfig(name)) {\n      return get(name, viewConfigProvider);\n    }\n  } else {\n    if (getRuntimeConfig(name) != null) {\n      return get(name, viewConfigProvider);\n    }\n  }\n\n  var FallbackNativeComponent = function FallbackNativeComponent(props) {\n    return null;\n  };\n\n  FallbackNativeComponent.displayName = \"Fallback(\" + name + \")\";\n  return FallbackNativeComponent;\n}\n\nfunction hasNativeViewConfig(name) {\n  invariant(getRuntimeConfig == null, 'Unexpected invocation!');\n  return UIManager.getViewManagerConfig(name) != null;\n}\n\nexport function unstable_hasStaticViewConfig(name) {\n  var _getRuntimeConfig2;\n\n  var _ref2 = (_getRuntimeConfig2 = getRuntimeConfig == null ? void 0 : getRuntimeConfig(name)) != null ? _getRuntimeConfig2 : {\n    native: true\n  },\n      native = _ref2.native;\n\n  return !native;\n}\nexport function unstable_hasComponent(name) {\n  var hasNativeComponent = componentNameToExists.get(name);\n\n  if (hasNativeComponent == null) {\n    if (global.__nativeComponentRegistry__hasComponent) {\n      hasNativeComponent = global.__nativeComponentRegistry__hasComponent(name);\n      componentNameToExists.set(name, hasNativeComponent);\n    } else {\n      throw \"unstable_hasComponent('\" + name + \"'): Global function is not registered\";\n    }\n  }\n\n  return hasNativeComponent;\n}","map":{"version":3,"sources":["/workspace/stream-pay/node_modules/react-native/Libraries/NativeComponent/NativeComponentRegistry.js"],"names":["createViewConfig","UIManager","ReactNativeViewConfigRegistry","getNativeComponentAttributes","verifyComponentAttributeEquivalence","invariant","React","getRuntimeConfig","componentNameToExists","Map","setRuntimeConfigProvider","runtimeConfigProvider","get","name","viewConfigProvider","register","native","verify","viewConfig","getWithFallback_DEPRECATED","hasNativeViewConfig","FallbackNativeComponent","props","displayName","getViewManagerConfig","unstable_hasStaticViewConfig","unstable_hasComponent","hasNativeComponent","global","__nativeComponentRegistry__hasComponent","set"],"mappings":"AAUA,SAAQA,gBAAR;AACA,OAAOC,SAAP;AAKA,OAAOC,6BAAP;AACA,OAAOC,4BAAP;AACA,OAAOC,mCAAP;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,IAAIC,gBAAJ;AAEA,IAAIC,qBAA2C,GAAG,IAAIC,GAAJ,EAAlD;AASA,OAAO,SAASC,wBAAT,CACLC,qBADK,EAOC;AACNN,EAAAA,SAAS,CACPE,gBAAgB,IAAI,IADb,EAEP,2EAFO,CAAT;AAIAA,EAAAA,gBAAgB,GAAGI,qBAAnB;AACD;AAQD,OAAO,SAASC,GAAT,CACLC,IADK,EAELC,kBAFK,EAGkB;AACvBZ,EAAAA,6BAA6B,CAACa,QAA9B,CAAuCF,IAAvC,EAA6C,YAAM;AAAA;;AACjD,oCAAyBN,gBAAzB,oBAAyBA,gBAAgB,CAAGM,IAAH,CAAzC,gCAAqD;AACnDG,MAAAA,MAAM,EAAE,IAD2C;AAEnDC,MAAAA,MAAM,EAAE;AAF2C,KAArD;AAAA,QAAOD,MAAP,QAAOA,MAAP;AAAA,QAAeC,MAAf,QAAeA,MAAf;;AAKA,QAAMC,UAAU,GAAGF,MAAM,GACrBb,4BAA4B,CAACU,IAAD,CADP,GAErBb,gBAAgB,CAACc,kBAAkB,EAAnB,CAFpB;;AAIA,QAAIG,MAAJ,EAAY;AACV,UAAID,MAAJ,EAAY;AACVZ,QAAAA,mCAAmC,CACjCc,UADiC,EAEjClB,gBAAgB,CAACc,kBAAkB,EAAnB,CAFiB,CAAnC;AAID,OALD,MAKO;AACLV,QAAAA,mCAAmC,CACjCD,4BAA4B,CAACU,IAAD,CADK,EAEjCK,UAFiC,CAAnC;AAID;AACF;;AAED,WAAOA,UAAP;AACD,GAzBD;AA4BA,SAAOL,IAAP;AACD;AAWD,OAAO,SAASM,0BAAT,CACLN,IADK,EAELC,kBAFK,EAG4B;AACjC,MAAIP,gBAAgB,IAAI,IAAxB,EAA8B;AAE5B,QAAIa,mBAAmB,CAACP,IAAD,CAAvB,EAA+B;AAC7B,aAAOD,GAAG,CAASC,IAAT,EAAeC,kBAAf,CAAV;AACD;AACF,GALD,MAKO;AAEL,QAAIP,gBAAgB,CAACM,IAAD,CAAhB,IAA0B,IAA9B,EAAoC;AAClC,aAAOD,GAAG,CAASC,IAAT,EAAeC,kBAAf,CAAV;AACD;AACF;;AAED,MAAMO,uBAAuB,GAAG,SAA1BA,uBAA0B,CAASC,KAAT,EAAoC;AAClE,WAAO,IAAP;AACD,GAFD;;AAGAD,EAAAA,uBAAuB,CAACE,WAAxB,iBAAkDV,IAAlD;AACA,SAAOQ,uBAAP;AACD;;AAED,SAASD,mBAAT,CAA6BP,IAA7B,EAAoD;AAClDR,EAAAA,SAAS,CAACE,gBAAgB,IAAI,IAArB,EAA2B,wBAA3B,CAAT;AACA,SAAON,SAAS,CAACuB,oBAAV,CAA+BX,IAA/B,KAAwC,IAA/C;AACD;;AAQD,OAAO,SAASY,4BAAT,CAAsCZ,IAAtC,EAA6D;AAAA;;AAClE,oCAAiBN,gBAAjB,oBAAiBA,gBAAgB,CAAGM,IAAH,CAAjC,iCAA6C;AAC3CG,IAAAA,MAAM,EAAE;AADmC,GAA7C;AAAA,MAAOA,MAAP,SAAOA,MAAP;;AAGA,SAAO,CAACA,MAAR;AACD;AAQD,OAAO,SAASU,qBAAT,CAA+Bb,IAA/B,EAAsD;AAC3D,MAAIc,kBAAkB,GAAGnB,qBAAqB,CAACI,GAAtB,CAA0BC,IAA1B,CAAzB;;AACA,MAAIc,kBAAkB,IAAI,IAA1B,EAAgC;AAC9B,QAAIC,MAAM,CAACC,uCAAX,EAAoD;AAClDF,MAAAA,kBAAkB,GAAGC,MAAM,CAACC,uCAAP,CAA+ChB,IAA/C,CAArB;AACAL,MAAAA,qBAAqB,CAACsB,GAAtB,CAA0BjB,IAA1B,EAAgCc,kBAAhC;AACD,KAHD,MAGO;AACL,wCAAgCd,IAAhC;AACD;AACF;;AACD,SAAOc,kBAAP;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport {createViewConfig} from './ViewConfig';\nimport UIManager from '../ReactNative/UIManager';\nimport type {\n  HostComponent,\n  PartialViewConfig,\n} from '../Renderer/shims/ReactNativeTypes';\nimport ReactNativeViewConfigRegistry from '../Renderer/shims/ReactNativeViewConfigRegistry';\nimport getNativeComponentAttributes from '../ReactNative/getNativeComponentAttributes';\nimport verifyComponentAttributeEquivalence from '../Utilities/verifyComponentAttributeEquivalence';\nimport invariant from 'invariant';\nimport * as React from 'react';\n\nlet getRuntimeConfig;\n\nlet componentNameToExists: Map<string, boolean> = new Map();\n\n/**\n * Configures a function that is called to determine whether a given component\n * should be registered using reflection of the native component at runtime.\n *\n * The provider should return null if the native component is unavailable in\n * the current environment.\n */\nexport function setRuntimeConfigProvider(\n  runtimeConfigProvider: (\n    name: string,\n  ) => ?{\n    native: boolean,\n    verify: boolean,\n  },\n): void {\n  invariant(\n    getRuntimeConfig == null,\n    'NativeComponentRegistry.setRuntimeConfigProvider() called more than once.',\n  );\n  getRuntimeConfig = runtimeConfigProvider;\n}\n\n/**\n * Gets a `NativeComponent` that can be rendered by React Native.\n *\n * The supplied `viewConfigProvider` may or may not be invoked and utilized,\n * depending on how `setRuntimeConfigProvider` is configured.\n */\nexport function get<Config>(\n  name: string,\n  viewConfigProvider: () => PartialViewConfig,\n): HostComponent<Config> {\n  ReactNativeViewConfigRegistry.register(name, () => {\n    const {native, verify} = getRuntimeConfig?.(name) ?? {\n      native: true,\n      verify: false,\n    };\n\n    const viewConfig = native\n      ? getNativeComponentAttributes(name)\n      : createViewConfig(viewConfigProvider());\n\n    if (verify) {\n      if (native) {\n        verifyComponentAttributeEquivalence(\n          viewConfig,\n          createViewConfig(viewConfigProvider()),\n        );\n      } else {\n        verifyComponentAttributeEquivalence(\n          getNativeComponentAttributes(name),\n          viewConfig,\n        );\n      }\n    }\n\n    return viewConfig;\n  });\n\n  // $FlowFixMe[incompatible-return] `NativeComponent` is actually string!\n  return name;\n}\n\n/**\n * Same as `NativeComponentRegistry.get(...)`, except this will check either\n * the `setRuntimeConfigProvider` configuration or use native reflection (slow)\n * to determine whether this native component is available.\n *\n * If the native component is not available, a stub component is returned. Note\n * that the return value of this is not `HostComponent` because the returned\n * component instance is not guaranteed to have native methods.\n */\nexport function getWithFallback_DEPRECATED<Config>(\n  name: string,\n  viewConfigProvider: () => PartialViewConfig,\n): React.AbstractComponent<Config> {\n  if (getRuntimeConfig == null) {\n    // If `setRuntimeConfigProvider` is not configured, use native reflection.\n    if (hasNativeViewConfig(name)) {\n      return get<Config>(name, viewConfigProvider);\n    }\n  } else {\n    // If there is no runtime config, then the native component is unavailable.\n    if (getRuntimeConfig(name) != null) {\n      return get<Config>(name, viewConfigProvider);\n    }\n  }\n\n  const FallbackNativeComponent = function(props: Config): React.Node {\n    return null;\n  };\n  FallbackNativeComponent.displayName = `Fallback(${name})`;\n  return FallbackNativeComponent;\n}\n\nfunction hasNativeViewConfig(name: string): boolean {\n  invariant(getRuntimeConfig == null, 'Unexpected invocation!');\n  return UIManager.getViewManagerConfig(name) != null;\n}\n\n/**\n * Unstable API. Do not use!\n *\n * This method returns if there is a StaticViewConfig registered for the\n * component name received as a parameter.\n */\nexport function unstable_hasStaticViewConfig(name: string): boolean {\n  const {native} = getRuntimeConfig?.(name) ?? {\n    native: true,\n  };\n  return !native;\n}\n\n/**\n * Unstable API. Do not use!\n *\n * This method returns if the component with name received as a parameter\n * is registed in the native platform.\n */\nexport function unstable_hasComponent(name: string): boolean {\n  let hasNativeComponent = componentNameToExists.get(name);\n  if (hasNativeComponent == null) {\n    if (global.__nativeComponentRegistry__hasComponent) {\n      hasNativeComponent = global.__nativeComponentRegistry__hasComponent(name);\n      componentNameToExists.set(name, hasNativeComponent);\n    } else {\n      throw `unstable_hasComponent('${name}'): Global function is not registered`;\n    }\n  }\n  return hasNativeComponent;\n}\n"]},"metadata":{},"sourceType":"module"}