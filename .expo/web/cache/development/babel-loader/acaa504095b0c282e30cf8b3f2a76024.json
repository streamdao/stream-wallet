{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { memo, useState, useMemo, useRef, useCallback, useEffect } from 'react';\nimport { Background, ThemeButton, SubPageHeader } from \"../components\";\nimport { theme } from \"../core/theme\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInputRN from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { BottomSheetModal, BottomSheetModalProvider } from '@gorhom/bottom-sheet';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport * as SecureStore from 'expo-secure-store';\nimport { generateMnemonic, mnemonicToSeed, copyToClipboard, getAccountFromSeed, DERIVATION_PATH } from \"../utils/index\";\nimport { useStoreState, useStoreActions } from \"../hooks/storeHooks\";\nimport Storage from \"../storage\";\n\nvar CreateWalletScreen = function CreateWalletScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      name = _useState2[0],\n      setName = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      secret = _useState4[0],\n      setSecret = _useState4[1];\n\n  var passcode = useStoreState(function (state) {\n    return state.passcode;\n  });\n  var setSubWallets = useStoreActions(function (actions) {\n    return actions.setSubWallets;\n  });\n\n  function storePhraseAndContinue(passcode, phrase) {\n    return _regeneratorRuntime.async(function storePhraseAndContinue$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(SecureStore.setItemAsync(passcode, phrase));\n\n          case 2:\n            navigation.navigate('Main');\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function setWallet(mnemonic) {\n    var seed, newAccount, publicKey, walletKey;\n    return _regeneratorRuntime.async(function setWallet$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(mnemonicToSeed(mnemonic));\n\n          case 2:\n            seed = _context2.sent;\n            newAccount = getAccountFromSeed(seed, 0, DERIVATION_PATH.bip44Change);\n            publicKey = newAccount.publicKey;\n            walletKey = publicKey.toString('hex');\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(Storage.setItem('firstWalletKey', walletKey));\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function generatePhrase() {\n    var mnemonic;\n    return _regeneratorRuntime.async(function generatePhrase$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(generateMnemonic());\n\n          case 2:\n            mnemonic = _context3.sent;\n            setWallet(mnemonic);\n            setSecret(mnemonic);\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  useEffect(function () {\n    generatePhrase();\n  }, []);\n  var bottomSheetModalRef = useRef(null);\n  var snapPoints = useMemo(function () {\n    return ['25%', '50%'];\n  }, []);\n  var handlePresentModalPress = useCallback(function () {\n    var _bottomSheetModalRef$;\n\n    (_bottomSheetModalRef$ = bottomSheetModalRef.current) == null ? void 0 : _bottomSheetModalRef$.present();\n  }, []);\n  var handleSheetChanges = useCallback(function (index) {\n    console.log('handleSheetChanges', index);\n  }, []);\n  return React.createElement(Background, {\n    position: \"bottom\",\n    dismissKeyboard: true\n  }, React.createElement(View, null, React.createElement(SubPageHeader, {\n    backButton: true\n  }, \"Create Wallet\"), React.createElement(Text, {\n    style: _objectSpread({\n      marginVertical: 24\n    }, theme.fonts.Nunito_Sans.Body_L_Bold)\n  }, \"Copy the secret phrase (password) below and store it somewhere safe.\"), React.createElement(View, {\n    style: {\n      borderWidth: 1,\n      borderColor: theme.colors.black_seven,\n      borderRadius: 18,\n      padding: 16,\n      marginBottom: 24\n    }\n  }, React.createElement(TextInputRN, {\n    style: _objectSpread(_objectSpread({\n      borderColor: 'black',\n      borderWidth: 0\n    }, theme.fonts.Nunito_Sans.Body_M_Regular), {}, {\n      marginBottom: 8\n    }),\n    editable: false,\n    onChangeText: function onChangeText(text) {\n      return setSecret(text);\n    },\n    value: secret,\n    placeholder: \"Enter your secret phrase\",\n    keyboardType: \"default\",\n    multiline: true\n  }), React.createElement(View, {\n    style: {\n      borderBottomColor: theme.colors.black_seven,\n      borderBottomWidth: 1,\n      marginBottom: 8\n    }\n  }), React.createElement(View, {\n    style: {\n      flexDirection: 'row'\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: {\n      flexDirection: 'row',\n      marginRight: 8,\n      padding: 6,\n      backgroundColor: '#F1F4F9',\n      borderRadius: 6\n    },\n    onPress: function onPress() {\n      return copyToClipboard(secret, 'Secret Phrase');\n    }\n  }, React.createElement(Image, {\n    source: require(\"../assets/icons/Copy_2.png\"),\n    style: {\n      width: 16,\n      height: 16,\n      alignSelf: 'center',\n      marginRight: 6\n    }\n  }), React.createElement(Text, {\n    style: theme.fonts.Nunito_Sans.Caption_S_SemiBold\n  }, \"Copy\")))), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      var _bottomSheetModalRef$2;\n\n      return (_bottomSheetModalRef$2 = bottomSheetModalRef.current) == null ? void 0 : _bottomSheetModalRef$2.present();\n    }\n  }, React.createElement(Text, {\n    style: theme.fonts.Nunito_Sans.Body_M_Bold\n  }, \"What is a Secret Phrase?\"))), React.createElement(View, {\n    style: {\n      marginBottom: 40\n    }\n  }, React.createElement(ThemeButton, {\n    mode: \"contained\",\n    onPress: function onPress() {\n      return storePhraseAndContinue(passcode, secret);\n    }\n  }, \"Save & Continue\")), React.createElement(BottomSheetModalProvider, null, React.createElement(BottomSheetModal, {\n    ref: bottomSheetModalRef,\n    index: 1,\n    snapPoints: snapPoints,\n    onChange: handleSheetChanges,\n    style: {\n      shadowColor: '#000',\n      shadowOffset: {\n        width: 0,\n        height: 6\n      },\n      shadowOpacity: 0.37,\n      shadowRadius: 7.49,\n      elevation: 12\n    }\n  }, React.createElement(View, {\n    style: {\n      justifyContent: 'space-between',\n      margin: 16\n    }\n  }, React.createElement(View, {\n    style: {\n      marginBottom: 24,\n      marginTop: 8\n    }\n  }, React.createElement(Text, {\n    style: theme.fonts.Azeret_Mono.Header_M_SemiBold\n  }, \"What is a Secret Phrase?\")), React.createElement(Text, {\n    style: _objectSpread(_objectSpread({}, theme.fonts.Nunito_Sans.Body_M_SemiBold), {}, {\n      marginBottom: 16\n    })\n  }, \"The secret phrase is like a password, but generated programmatically and more secure.\"), React.createElement(Text, {\n    style: _objectSpread(_objectSpread({}, theme.fonts.Nunito_Sans.Body_M_SemiBold), {}, {\n      marginBottom: 16\n    })\n  }, \"You should have received it from where you generated your wallet and it should be 12-20 words long.\"), React.createElement(Text, {\n    style: _objectSpread(_objectSpread({}, theme.fonts.Nunito_Sans.Body_M_SemiBold), {}, {\n      marginBottom: 16\n    })\n  }, \"Be sure to enter it in the exact word order you received it with a space between each word.\"), React.createElement(ThemeButton, {\n    onPress: function onPress() {\n      var _bottomSheetModalRef$3;\n\n      return (_bottomSheetModalRef$3 = bottomSheetModalRef.current) == null ? void 0 : _bottomSheetModalRef$3.dismiss();\n    }\n  }, ' ', \"I Understand\")))));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 24,\n    justifyContent: 'center',\n    backgroundColor: 'grey'\n  },\n  contentContainer: {\n    flex: 1,\n    alignItems: 'center'\n  }\n});\nexport default memo(CreateWalletScreen);","map":{"version":3,"sources":["/workspace/stream-pay/screens/CreateWalletScreen.tsx"],"names":["React","memo","useState","useMemo","useRef","useCallback","useEffect","Background","ThemeButton","SubPageHeader","theme","BottomSheetModal","BottomSheetModalProvider","TouchableOpacity","SecureStore","generateMnemonic","mnemonicToSeed","copyToClipboard","getAccountFromSeed","DERIVATION_PATH","useStoreState","useStoreActions","Storage","CreateWalletScreen","navigation","name","setName","secret","setSecret","passcode","state","setSubWallets","actions","storePhraseAndContinue","phrase","setItemAsync","navigate","setWallet","mnemonic","seed","newAccount","bip44Change","publicKey","walletKey","toString","setItem","generatePhrase","bottomSheetModalRef","snapPoints","handlePresentModalPress","current","present","handleSheetChanges","index","console","log","marginVertical","fonts","Nunito_Sans","Body_L_Bold","borderWidth","borderColor","colors","black_seven","borderRadius","padding","marginBottom","Body_M_Regular","text","borderBottomColor","borderBottomWidth","flexDirection","marginRight","backgroundColor","require","width","height","alignSelf","Caption_S_SemiBold","Body_M_Bold","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","justifyContent","margin","marginTop","Azeret_Mono","Header_M_SemiBold","Body_M_SemiBold","dismiss","styles","StyleSheet","create","container","flex","contentContainer","alignItems"],"mappings":"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","sourcesContent":["import React, {\n\tmemo,\n\tuseState,\n\tuseMemo,\n\tuseRef,\n\tuseCallback,\n\tuseEffect,\n} from 'react';\nimport { Background, ThemeButton, SubPageHeader } from '../components';\nimport { Navigation } from '../types';\nimport { theme } from '../core/theme';\nimport {\n\tView,\n\tText,\n\tTextInput as TextInputRN,\n\tImage,\n\tStyleSheet,\n\tTouchableWithoutFeedback,\n\tAlert,\n} from 'react-native';\nimport {\n\tBottomSheetModal,\n\tBottomSheetModalProvider,\n} from '@gorhom/bottom-sheet';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport * as Clipboard from 'expo-clipboard';\nimport * as SecureStore from 'expo-secure-store';\nimport {\n\tgenerateMnemonic,\n\tmnemonicToSeed,\n\tcopyToClipboard,\n\tgetAccountFromSeed,\n\tDERIVATION_PATH,\n} from '../utils/index';\nimport { useStoreState, useStoreActions } from '../hooks/storeHooks';\nimport Storage from '../storage';\n\ntype Props = {\n\tnavigation: Navigation;\n};\n\nconst CreateWalletScreen = ({ navigation }: Props) => {\n\tconst [name, setName] = useState('');\n\tconst [secret, setSecret] = useState('');\n\tconst passcode = useStoreState((state) => state.passcode);\n\tconst setSubWallets = useStoreActions((actions) => actions.setSubWallets);\n\n\tasync function storePhraseAndContinue(passcode: string, phrase: string) {\n\t\tawait SecureStore.setItemAsync(passcode, phrase);\n\t\tnavigation.navigate('Main');\n\t}\n\n\tasync function setWallet(mnemonic: string) {\n\t\tconst seed = await mnemonicToSeed(mnemonic);\n\t\tconst newAccount = getAccountFromSeed(\n\t\t\tseed,\n\t\t\t0,\n\t\t\tDERIVATION_PATH.bip44Change,\n\t\t);\n\t\tconst { publicKey } = newAccount;\n\t\tconst walletKey = publicKey.toString('hex');\n\n\t\tawait Storage.setItem('firstWalletKey', walletKey);\n\t}\n\n\tasync function generatePhrase() {\n\t\tconst mnemonic = await generateMnemonic();\n\t\tsetWallet(mnemonic);\n\t\tsetSecret(mnemonic);\n\t}\n\n\tuseEffect(() => {\n\t\tgeneratePhrase();\n\t}, []);\n\n\t// bottomsheet stuff\n\tconst bottomSheetModalRef = useRef<BottomSheetModal>(null);\n\tconst snapPoints = useMemo(() => ['25%', '50%'], []);\n\tconst handlePresentModalPress = useCallback(() => {\n\t\tbottomSheetModalRef.current?.present();\n\t}, []);\n\tconst handleSheetChanges = useCallback((index: number) => {\n\t\tconsole.log('handleSheetChanges', index);\n\t}, []);\n\n\treturn (\n\t\t<Background position=\"bottom\" dismissKeyboard={true}>\n\t\t\t<View>\n\t\t\t\t<SubPageHeader backButton={true}>Create Wallet</SubPageHeader>\n\t\t\t\t<Text\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tmarginVertical: 24,\n\t\t\t\t\t\t...theme.fonts.Nunito_Sans.Body_L_Bold,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tCopy the secret phrase (password) below and store it\n\t\t\t\t\tsomewhere safe.\n\t\t\t\t</Text>\n\t\t\t\t<View\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tborderWidth: 1,\n\t\t\t\t\t\tborderColor: theme.colors.black_seven,\n\t\t\t\t\t\tborderRadius: 18,\n\t\t\t\t\t\tpadding: 16,\n\t\t\t\t\t\tmarginBottom: 24,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<TextInputRN\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tborderColor: 'black',\n\t\t\t\t\t\t\tborderWidth: 0,\n\t\t\t\t\t\t\t...theme.fonts.Nunito_Sans.Body_M_Regular,\n\t\t\t\t\t\t\tmarginBottom: 8,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\teditable={false}\n\t\t\t\t\t\tonChangeText={(text) => setSecret(text)}\n\t\t\t\t\t\tvalue={secret}\n\t\t\t\t\t\tplaceholder=\"Enter your secret phrase\"\n\t\t\t\t\t\t// placeholderTextColor: theme.colors.primary\n\t\t\t\t\t\tkeyboardType=\"default\"\n\t\t\t\t\t\tmultiline={true}\n\t\t\t\t\t\t// minHeight={150}\n\t\t\t\t\t/>\n\t\t\t\t\t<View\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tborderBottomColor: theme.colors.black_seven,\n\t\t\t\t\t\t\tborderBottomWidth: 1,\n\t\t\t\t\t\t\tmarginBottom: 8,\n\t\t\t\t\t\t}}\n\t\t\t\t\t></View>\n\t\t\t\t\t<View style={{ flexDirection: 'row' }}>\n\t\t\t\t\t\t<TouchableOpacity\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tflexDirection: 'row',\n\t\t\t\t\t\t\t\tmarginRight: 8,\n\t\t\t\t\t\t\t\tpadding: 6,\n\t\t\t\t\t\t\t\tbackgroundColor: '#F1F4F9',\n\t\t\t\t\t\t\t\tborderRadius: 6,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonPress={() =>\n\t\t\t\t\t\t\t\tcopyToClipboard(secret, 'Secret Phrase')\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Image\n\t\t\t\t\t\t\t\tsource={require('../assets/icons/Copy_2.png')}\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\twidth: 16,\n\t\t\t\t\t\t\t\t\theight: 16,\n\t\t\t\t\t\t\t\t\talignSelf: 'center',\n\t\t\t\t\t\t\t\t\tmarginRight: 6,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\t\tstyle={\n\t\t\t\t\t\t\t\t\ttheme.fonts.Nunito_Sans.Caption_S_SemiBold\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tCopy\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t</TouchableOpacity>\n\t\t\t\t\t</View>\n\t\t\t\t</View>\n\t\t\t\t{/* <Button\n\t\t\t\tonPress={handlePresentModalPress}\n\t\t\t\ttitle=\"Present Modal\"\n\t\t\t\tmode=\"contained\"\n\t\t\t\t// color=\"black\"\n\t\t\t/> */}\n\t\t\t\t<TouchableOpacity\n\t\t\t\t\tonPress={() => bottomSheetModalRef.current?.present()}\n\t\t\t\t>\n\t\t\t\t\t<Text style={theme.fonts.Nunito_Sans.Body_M_Bold}>\n\t\t\t\t\t\tWhat is a Secret Phrase?\n\t\t\t\t\t</Text>\n\t\t\t\t</TouchableOpacity>\n\t\t\t\t{/* <View style={{ height: 250 }}></View> */}\n\t\t\t</View>\n\t\t\t<View style={{ marginBottom: 40 }}>\n\t\t\t\t<ThemeButton\n\t\t\t\t\tmode=\"contained\"\n\t\t\t\t\tonPress={() => storePhraseAndContinue(passcode, secret)}\n\t\t\t\t>\n\t\t\t\t\tSave & Continue\n\t\t\t\t</ThemeButton>\n\t\t\t</View>\n\t\t\t<BottomSheetModalProvider>\n\t\t\t\t<BottomSheetModal\n\t\t\t\t\tref={bottomSheetModalRef}\n\t\t\t\t\tindex={1}\n\t\t\t\t\tsnapPoints={snapPoints}\n\t\t\t\t\tonChange={handleSheetChanges}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\t// margin: 16,\n\t\t\t\t\t\tshadowColor: '#000',\n\t\t\t\t\t\tshadowOffset: {\n\t\t\t\t\t\t\twidth: 0,\n\t\t\t\t\t\t\theight: 6,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tshadowOpacity: 0.37,\n\t\t\t\t\t\tshadowRadius: 7.49,\n\t\t\t\t\t\televation: 12,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<View\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tjustifyContent: 'space-between',\n\t\t\t\t\t\t\tmargin: 16,\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<View\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tmarginBottom: 24,\n\t\t\t\t\t\t\t\tmarginTop: 8,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\t\tstyle={\n\t\t\t\t\t\t\t\t\ttheme.fonts.Azeret_Mono.Header_M_SemiBold\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tWhat is a Secret Phrase?\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t</View>\n\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t...theme.fonts.Nunito_Sans.Body_M_SemiBold,\n\t\t\t\t\t\t\t\tmarginBottom: 16,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tThe secret phrase is like a password, but generated\n\t\t\t\t\t\t\tprogrammatically and more secure.\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t...theme.fonts.Nunito_Sans.Body_M_SemiBold,\n\t\t\t\t\t\t\t\tmarginBottom: 16,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tYou should have received it from where you generated\n\t\t\t\t\t\t\tyour wallet and it should be 12-20 words long.\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t...theme.fonts.Nunito_Sans.Body_M_SemiBold,\n\t\t\t\t\t\t\t\tmarginBottom: 16,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tBe sure to enter it in the exact word order you\n\t\t\t\t\t\t\treceived it with a space between each word.\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t<ThemeButton\n\t\t\t\t\t\t\tonPress={() =>\n\t\t\t\t\t\t\t\tbottomSheetModalRef.current?.dismiss()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\tI Understand\n\t\t\t\t\t\t</ThemeButton>\n\t\t\t\t\t</View>\n\t\t\t\t</BottomSheetModal>\n\t\t\t</BottomSheetModalProvider>\n\t\t</Background>\n\t);\n};\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tpadding: 24,\n\t\tjustifyContent: 'center',\n\t\tbackgroundColor: 'grey',\n\t},\n\tcontentContainer: {\n\t\tflex: 1,\n\t\talignItems: 'center',\n\t},\n});\n\nexport default memo(CreateWalletScreen);\n"]},"metadata":{},"sourceType":"module"}